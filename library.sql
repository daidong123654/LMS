-- phpMyAdmin SQL Dump
-- version 3.4.5
-- http://www.phpmyadmin.net
--
-- 主机: localhost
-- 生成日期: 2012 年 11 月 16 日 10:00
-- 服务器版本: 5.5.16
-- PHP 版本: 5.3.8

SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- 数据库: `library`
--

-- --------------------------------------------------------

--
-- 表的结构 `lib_admin_action`
--

CREATE TABLE IF NOT EXISTS `lib_admin_action` (
  `id` smallint(6) NOT NULL AUTO_INCREMENT,
  `parent_id` smallint(6) NOT NULL,
  `action_code` varchar(32) COLLATE utf8_bin NOT NULL,
  `cn_name` varchar(64) COLLATE utf8_bin NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='权限表' AUTO_INCREMENT=28 ;

--
-- 转存表中的数据 `lib_admin_action`
--

INSERT INTO `lib_admin_action` (`id`, `parent_id`, `action_code`, `cn_name`) VALUES
(1, 0, 'books', '图书管理'),
(2, 0, 'reader', '读者管理'),
(3, 0, 'system', '系统设置'),
(4, 1, 'books_add', '图书添加'),
(5, 1, 'books_edit', '图书编辑'),
(6, 1, 'books_del', '图书删除'),
(7, 1, 'books_return', '还书'),
(8, 1, 'books_borrow', '借书'),
(9, 2, 'reader_add', '增加读者'),
(10, 2, 'reader_edit', '编辑读者'),
(11, 2, 'reader_del', '删除读者'),
(12, 3, 'admin_user_add', '增加管理员'),
(13, 3, 'admin_user_edit', '编辑管理员'),
(14, 3, 'admin_user_del', '删除管理员'),
(15, 3, 'admin_role_add', '添加角色'),
(16, 3, 'admin_role_edit', '编辑角色'),
(17, 3, 'admin_role_del', '删除角色'),
(18, 3, 'admin_role_del', '删除角色'),
(19, 3, 'lib_news_add', '增加新闻'),
(20, 3, 'lib_news_edit', '编辑新闻'),
(21, 3, 'lib_news_del', '删除新闻'),
(22, 3, 'lib_info_edit', '编辑信息'),
(24, 3, 'books_cat_edit', '编辑图书分类'),
(23, 3, 'books_cat_add', '添加图书分类'),
(25, 3, 'books_cat_del', '删除图书分类');

-- --------------------------------------------------------

--
-- 表的结构 `lib_bookinfo`
--

CREATE TABLE IF NOT EXISTS `lib_bookinfo` (
  `barcode` varchar(30) NOT NULL,
  `bookname` varchar(70) NOT NULL,
  `booktype` int(10) unsigned DEFAULT NULL,
  `author` varchar(30) NOT NULL,
  `translator` varchar(30) DEFAULT NULL,
  `ISBN` varchar(20) NOT NULL,
  `price` float DEFAULT NULL,
  `page` int(10) unsigned DEFAULT NULL,
  `keywords` varchar(3000) DEFAULT NULL,
  `bookrack` int(10) unsigned DEFAULT NULL,
  `storge` int(10) DEFAULT NULL,
  `publishtime` date DEFAULT NULL,
  `inTime` date DEFAULT NULL,
  `UpdateDate` date NOT NULL,
  `operatorid` int(10) DEFAULT NULL,
  `isdelete` tinyint(1) NOT NULL DEFAULT '0',
  `bookID` int(11) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`bookID`),
  UNIQUE KEY `barcode` (`barcode`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COMMENT='书籍信息表' AUTO_INCREMENT=36 ;

--
-- 转存表中的数据 `lib_bookinfo`
--

INSERT INTO `lib_bookinfo` (`barcode`, `bookname`, `booktype`, `author`, `translator`, `ISBN`, `price`, `page`, `keywords`, `bookrack`, `storge`, `publishtime`, `inTime`, `UpdateDate`, `operatorid`, `isdelete`, `bookID`) VALUES
('2', '围城', 1, '钱钟书', '钱钟书', '1', 11, 345, '钱钟书', 1, 0, '0000-00-00', NULL, '2012-10-08', NULL, 1, 1),
('3', '围城1', 1, '钱钟书', '钱钟书', '1', 11, 345, '钱钟书', 1, 1, '0000-00-00', NULL, '2012-10-09', NULL, 1, 2),
('', '围城', 1, '钱钟书', '钱钟书', '1', 11, 345, '钱钟书', 1, 1, '0000-00-00', NULL, '2012-10-08', NULL, 1, 3),
('4', '围城', 1, '钱钟书', '钱钟书', '1', 11, 345, '钱钟书', 1, 1, '0000-00-00', NULL, '2012-10-08', NULL, 1, 6),
('5', '围城', 1, '钱钟书', '钱钟书', '1', 11, 345, '钱钟书', 1, 0, '0000-00-00', NULL, '2012-10-08', NULL, 1, 7),
('7', '围城', 1, '钱钟书', '钱钟书', '1', 11, 345, '钱钟书', 1, 1, '0000-00-00', NULL, '2012-10-08', NULL, 1, 9),
('8', '围城', 1, '钱钟书', '钱钟书', '1', 11, 345, '钱钟书', 1, 1, '0000-00-00', NULL, '2012-10-08', NULL, 1, 10),
('9', '围城', 1, '钱钟书', '钱钟书', '1', 11, 345, '钱钟书', 1, 1, '0000-00-00', NULL, '2012-10-08', NULL, 1, 11),
('10', '围城', 1, '钱钟书', '钱钟书', '1', 11, 345, '钱钟书', 1, 1, '0000-00-00', NULL, '2012-10-08', NULL, 1, 12),
('11', '围城', 1, '钱钟书', '钱钟书', '1', 11, 345, '钱钟书', 1, 1, '0000-00-00', NULL, '2012-10-08', NULL, 1, 13),
('12', '围城', 1, '钱钟书', '钱钟书', '1', 11, 345, '钱钟书', 1, 1, '0000-00-00', NULL, '2012-10-08', NULL, 1, 14),
('13', '围城', 1, '钱钟书', '钱钟书', '1', 11, 345, '钱钟书', 1, 1, '0000-00-00', NULL, '2012-10-08', NULL, 1, 15),
('1', '围城', 1, '钱钟书', '钱钟书', '1', 11, 345, '钱钟书', 1, 1, '0000-00-00', NULL, '2012-10-08', NULL, 1, 20),
('0', '围城', 1, '钱钟书', '钱钟书', '1', 11, 345, '钱钟书', 1, 1, '0000-00-00', '2012-10-07', '2012-10-08', NULL, 1, 21),
('15', '围城', 1, '钱钟书', '钱钟书', '1', 11, 345, '钱钟书', 1, 1, '0000-00-00', '2012-10-08', '2012-10-08', NULL, 1, 28),
('16', '围城11', 1, '钱钟书', '钱钟书', '1', 11, 345, '钱钟书', 1, 1, '0000-00-00', '2012-10-08', '2012-10-08', NULL, 1, 29),
('TP689-38874', 'JavaScript高级编程', 334, 'Nicholas C.Zakas', '李松峰/曹力', '978-7-115-23095-9', 89, 600, 'JavaScript高级编程', 1, 2, '2010-09-01', '2012-10-09', '2012-10-09', NULL, 0, 30),
('TP1123-221', '深入体验PHP项目开发', 334, '0', '0', '1', 32, 0, '0', 0, 3, '2010-09-01', '2012-10-10', '2012-10-10', NULL, 0, 31),
('TP1223-23', 'c++primer', 334, '0', '0', '978-7-115-23095-9', 120, 0, '0', 0, 1, '2009-08-01', '2012-10-10', '2012-10-12', NULL, 0, 32),
('TP233-123', 'Java大学教程', 334, 'Havery M.Deitel', '0', '1', 65, 0, '0', 0, 2, '0000-00-00', '2012-10-10', '2012-10-19', NULL, 0, 33),
('tp110', 'zanwu', 1, '0', '0', '1', 0, 0, '0', 0, 2, '2012-10-01', '2012-10-11', '0000-00-00', NULL, 1, 34),
('TP1111-121', '围城', 1, '0', '0', '1', 0, 0, '0', 0, 6, '2012-10-01', '2012-10-26', '0000-00-00', NULL, 0, 35);

-- --------------------------------------------------------

--
-- 表的结构 `lib_bookrack`
--

CREATE TABLE IF NOT EXISTS `lib_bookrack` (
  `rackID` int(10) NOT NULL AUTO_INCREMENT,
  `rackname` varchar(20) CHARACTER SET latin1 DEFAULT NULL,
  `racklocation` varchar(30) CHARACTER SET latin1 DEFAULT NULL,
  PRIMARY KEY (`rackID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='书架表' AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- 表的结构 `lib_books_cat`
--

CREATE TABLE IF NOT EXISTS `lib_books_cat` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `name` varchar(255) COLLATE utf8_bin NOT NULL COMMENT '分类名',
  `parent_id` int(11) NOT NULL DEFAULT '0' COMMENT '父ID',
  `level` tinyint(3) NOT NULL DEFAULT '1' COMMENT '层次',
  `path` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '路径',
  `is_root` tinyint(1) NOT NULL DEFAULT '1' COMMENT '根节点?',
  `is_leaf` tinyint(1) NOT NULL DEFAULT '0' COMMENT '叶节点?',
  `sort_order` tinyint(1) NOT NULL DEFAULT '0' COMMENT '排序',
  `Avail_days` int(4) NOT NULL DEFAULT '30' COMMENT '可借阅天数',
  `created_at` datetime NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '添加日期',
  `updated_at` datetime NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '更新日期',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='图书分类表' AUTO_INCREMENT=344 ;

--
-- 转存表中的数据 `lib_books_cat`
--

INSERT INTO `lib_books_cat` (`id`, `name`, `parent_id`, `level`, `path`, `is_root`, `is_leaf`, `sort_order`, `Avail_days`, `created_at`, `updated_at`) VALUES
(1, '小说', 0, 0, '1', 1, 0, 0, 30, '0000-00-00 00:00:00', '2012-10-09 10:42:37'),
(339, 'PHP', 334, 1, '334,339', 0, 0, 0, 30, '2012-10-26 14:25:27', '2012-10-26 14:25:27'),
(338, '航天科技', 0, 0, '338', 1, 1, 0, 30, '2012-10-26 14:24:52', '2012-10-26 14:24:52'),
(337, '工程管理', 0, 0, '337', 1, 1, 0, 30, '2012-10-26 14:24:34', '2012-10-26 14:24:34'),
(336, 'daidong', 335, 2, '1,335,336', 0, 1, 0, 0, '2012-10-21 05:15:21', '2012-10-21 05:15:21'),
(335, 'admin', 1, 1, '1,335', 0, 0, 0, 12, '2012-10-21 05:15:09', '2012-10-21 05:15:09'),
(334, '计算机科学技术', 0, 0, '334', 1, 0, 0, 30, '2012-10-09 10:41:01', '2012-10-09 10:41:01'),
(340, 'JAVA', 334, 1, '334,340', 0, 1, 0, 0, '2012-10-26 14:25:45', '2012-10-26 14:25:45'),
(341, 'php入门', 339, 2, '334,339,341', 0, 1, 0, 0, '2012-10-26 14:26:00', '2012-10-26 14:26:00'),
(342, 'php进阶', 339, 2, '334,339,342', 0, 1, 0, 0, '2012-10-26 14:26:18', '2012-10-26 14:26:18'),
(343, 'php应用', 339, 2, '334,339,343', 0, 1, 0, 0, '2012-10-26 14:26:26', '2012-10-26 14:26:26');

-- --------------------------------------------------------

--
-- 表的结构 `lib_book_comment`
--

CREATE TABLE IF NOT EXISTS `lib_book_comment` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `bookID` int(11) NOT NULL,
  `reader` int(11) NOT NULL,
  `comment` text NOT NULL,
  `time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COMMENT='图书评论表' AUTO_INCREMENT=5 ;

--
-- 转存表中的数据 `lib_book_comment`
--

INSERT INTO `lib_book_comment` (`id`, `bookID`, `reader`, `comment`, `time`) VALUES
(1, 30, 60, 'http://localhost/phpmyadmin/index.php?db=library&token=daa91615520a7ffc9237672ff702a6dahttp://localhost/phpmyadmin/index.php?db=library&token=daa91615520a7ffc9237672ff702a6dahttp://localhost/phpmyadmin/index.php?db=library&token=daa91615520a7ffc9237672ff702a6dahttp://localhost/phpmyadmin/index.php?db=library&token=daa91615520a7ffc9237672ff702a6dahttp://localhost/phpmyadmin/index.php?db=library&token=daa91615520a7ffc9237672ff702a6da', '2012-11-16 02:54:07'),
(2, 30, 60, 'dsfffffffffffffffffffffffffffffffffffffff', '2012-11-15 20:56:27'),
(3, 30, 60, '的呵呵顶顶顶顶顶顶顶', '2012-11-15 20:56:52'),
(4, 31, 60, '一本很好的书', '2012-11-16 01:58:39');

-- --------------------------------------------------------

--
-- 表的结构 `lib_book_content`
--

CREATE TABLE IF NOT EXISTS `lib_book_content` (
  `id` int(11) NOT NULL,
  `content` longtext NOT NULL,
  `barcode` int(11) NOT NULL,
  `isdelete` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE KEY `barcode` (`barcode`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `lib_book_content`
--

INSERT INTO `lib_book_content` (`id`, `content`, `barcode`, `isdelete`) VALUES
(1, '\r\n\r\n\r\n\r\n计算机中断技术大作业\r\n\r\n\r\n\r\n\r\n\r\n代  东\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n院 （系）：计算机学院             专    业：计算机科学与技术类\r\n\r\n学　　号：1100300829                       指导教师：史先俊\r\n\r\n\r\n                     2012年10月                                   \r\n\r\n\r\n\r\n\r\n \r\n\r\n\r\n\r\n大作业\r\n \r\n\r\n\r\n\r\n\r\n题     目  深入理解中断系统  \r\n\r\n\r\n\r\n\r\n\r\n专       业   计算机科学与技术     \r\n学　　   号    1100300829          \r\n学       生     代     东          \r\n指 导 教 师     史先俊              \r\n \r\n目  录\r\n一：什么是中断？	2\r\n1.1 中断的定义	2\r\n1.2 中断技术差生的原因	3\r\n1.3 中断技术差生的优点	5\r\n1.4 中断技术差生的缺点	7\r\n二：基本概念	8\r\n2.1 中断源	8\r\n我们把引起中断的原因，或者能够发出中断请求信号的来源统称为中断源。在上面看书的例子中，打断你看书的时间就是中断源（电话响了）。	8\r\n2.2 中断嵌套	8\r\n2.3 中断级联	9\r\n图2.3	10\r\n2.4 软中断，硬中断	10\r\n2.5 NMI（不可屏蔽中断）& 可屏蔽中断	11\r\n2.6 中断请求号 & 中断向量	11\r\n2.7 中断响应INTA & 中断周期	11\r\n中断响应INTA:当8259A接收到第一个/INTA有效的负脉冲后，将被响应的中断源置入ISR（正在服务寄存器）的对应位，即ISR对应位置1，同时把IRR（中断请求寄存器）的对应位清0；	11\r\n2.8 单步中断 & IF中断允许标志位	12\r\n2.9 IMR中断屏蔽字  & 中断优先级	12\r\n2.10   中断控制器 & APIC	12\r\n2.11  中断共享 & 中断冲突	12\r\n2.12  MSI-X中断（PCIE）、中断处理子程序	13\r\n2.13  0号中断、1号中断	13\r\n2.14  中断描述符、中断描述符表	13\r\n2.15  异常	13\r\n2.16  中断门、OS的事件、消息	14\r\n三：中断资源相关	14\r\n3.1  我的电脑中断相关资源占用情况	14\r\n3.2 ISA中断	18\r\n3.3 PCI中断	22\r\n3.4 IRQ 0-15中断请求外的	22\r\n四：中断系统	22\r\n4.1 中断系统怎样协调完成中断过程	23\r\n五：多处理器系统的中断	24\r\n5.1 怎么连接	24\r\n5.1 如何处理	25\r\n六：硬件、软件是怎么配合完成中断处理的	25\r\n七：编写8251查询发送、中断接收的自检程序	27\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n摘  要\r\n\r\n学习计算机组成原理和计算机接口技术之中，“中断” 是一个必须要学习的美容，计算机之所以能够“智能”的运行起来使得其更容易被人使用很重要的一点就是有了中断技术。因为中断计算机从一个只靠计算速度和存储量来来博得人们喜爱的机器变成了一个用户有好的聪明的机器。\r\n\r\n本文将从几个问题入手来来逐一介绍计算机中断技术和中断系统。\r\n\r\n一：什么是中断？\r\n\r\n1.1 中断的定义\r\n\r\n在计算机科学中，中断是指由于接收到来自外围硬件（相对于中央处理器和内存）的异步信号或来自软件的同步信号，而进行相应的硬件／软件处理。发出这样的信号称为进行中断请求（interrupt request，IRQ）。硬件中断导致处理器通过一个上下文切换（context switch）来保存执行状态（以程序计数器和程序状态字等寄存器信息为主）；软件中断则通常作为CPU指令集中的一个指令，以可编程的方式直接指示这种上下文切换，并将处理导向一段中断处理代码。中断在计算机多任务处理，尤其是实时系统中尤为有用。这样的系统，包括运行于其上的操作系统，也被称为“中断驱动的”（interrupt-driven）。\r\n\r\n上面是来自维基百科对中断定义。\r\n\r\n个人认为中断就是计算机在执行程序的过程中，当出现异常情况或者是特殊请求时，计算机停止执行现行程序的运行，转向对这些异常情况或特殊请求的处理，处理后再返回到现行程序的间断处，继续执行原程序，这就是中断。\r\n \r\n	                       图1.1中断处理过程\r\n\r\n\r\n打一个不太恰当的比方。比如说你正在看书那么你就是CPU，看书就相当于你正在执行的程序，当你电话响了或者是有其他的事情发生导致你必须停下正在看的书去做另一件事（接电话）。那么这就是一个中断，在这个中断中现行程序是看书，中断时电话响了，CPU是你自己。当你接完电话之后（假设接完电话就没其他特殊的事了）那么你就回去看书，也就相当于定义中的返回执行原程序。\r\n\r\n1.2 中断技术差生的原因\r\n\r\n讲了上面的内容也许你对中断概念有了一定的了解。那么为什么会产生中断呢？\r\n为了介绍为什么会产生中断我们有必要对计算机的组成结构和工作的过程来了解一下。下图是计算机的组成结构。\r\n\r\n \r\n                       图1.2计算机组成结构\r\n\r\n可以看到计算机石油输入输出设备控制器运算器和存储器组成的，那么计算机是如何工作的呢？\r\n\r\n计算机工作时，首先由键盘等输入设备。输入程序和数据，程序和数据信息，通过J/O接口电路，经数据总线送入主存贮器中，接着CPU开始运行输入的指令，并处理输入的数据。CPU要进行下列工作：\r\n⑴将指令的地址放到地址总线；\r\n⑵按着上述地址，通过数据总线在主存贮器中找到并取出指令，由指令译码器对该指令进行分析译码；\r\n⑶根据译码结果，取出指令所要处理的数据地址及相应的数据；\r\n⑷执行指令所代表的具体操作；\r\n⑸检查是否还有其它的控制信号，若有，则对定进行处理；\r\n⑹把执行指令后所得的指令结果、状态的标志信号、控制信号和定时信号提供给整个微机系统；\r\n⑺继续处理用户输入的程序和数据。\r\n\r\n可以看到上在计算机工作过程中要始终检查有没有控制信号，而这控制信号中就有关于中断的控制信号。\r\n在计算机系统中中断的例子有很多。用户敲击键盘，每击一次键都要产生一个中断信号。告诉CPU有“键盘输入发生了”，要求CPU读入键值。至于为什么必须要读入键值呢？其实很简单，在执行程序和用户控制两个事件之间显然是用户控制事件的优先级要高于执行程序的优先级。要不你按下键盘电脑半天没有反应那你还不得把电脑踢了？\r\n\r\n以I/O中断为例。\r\n\r\n在I/O设备与主机交换信息时，由于设备本身机电特性的影响，其工作效率较低，与CPU无法匹配。因此，CPU启动之设备之后，往往需要等待一段时间才能实现与I/O设备之间的信息交换。如果在设备准备同时，CPU不做无所谓的等待，而继续执行现行程序，只有当I/O设备就绪向CPU提出请求后在暂时中断CPU现行程序转入I/O服务程序，这便产生了I/O中断。\r\n中断是用以提高计算机工作效率、增强计算机功能的一重要技术。最初引入硬件中断，只是出于性能上的考量。如果计算机系统没有中断，则处理器与外部设备通信时，它必须在向该设备发出指令后进行忙等待(Busy waiting，反复轮询该设备是否完成了动作并返回结果。这就造成了大量处理器周期被浪费。引入中断以后，当处理器发出设备请求后就可以立即返回以处理其他任务，而当设备完成动作后，发送中断信号给处理器，后者就可以再回过头获取处理结果。这样，在设备进行处理的周期内，处理器可以执行其他一些有意义的工作，而只付出一些很小的、切换上下文所引发的时间代价。后来被用于CPU外部与内部紧急事件的处理、机器故障的处理、时间控制等多个方面，并产生通过软件方式进入中断处理（软中断）的概念。。\r\n\r\n1.3 中断技术差生的优点\r\n先让我们感受一下中断机制对并发处理带来的帮助。\r\n\r\n让我们用程序来探讨一下烧水问题，如果没有“中断”（注意，我们这里只是模仿中断的场景，实际上是用异步事件——消息——处理机制来展示中断产生的效果。毕竟，在用户空间没有办法与实际中断产生直接联系，不过操作系统为用户空间提供的异步事件机制，可以看作是模仿中断的产物），设计如下：\r\nvoid StayInKitchen()\r\n{\r\nbool WaterIsBoiled = false;\r\nwhile ( WaterIsBoiled != true )\r\n{\r\n   bool VaporGavenOff  = false;\r\n\r\n      if(VaporGavenOff )\r\n        WaterIsBoiled  = true;\r\nelse\r\n      WaterIsBoiled  = false;\r\n}\r\n// 关煤气炉\r\nprintf(“Close gas oven.\\n”);\r\n// 一切安定下来，终于可以看电视了，10分钟的宝贵时间啊，逝者如斯夫…\r\nwatching_tv();\r\nreturn;\r\n}\r\n可以看出，整个流程如同我们前面描述的一样，所有工作要顺序执行，没有办法完成并发任务。\r\n \r\n如果用“中断”，在开始烧水的时候设定一个10分钟的“闹铃”，然后让CPU去看电视（有点难度，具体实现不在我们关心的范围之内，留给读者自行解决吧：>）。等闹钟响的时候再去厨房关炉子。\r\n#include <sys/types.h>\r\n#include <unistd.h>\r\n#include <sys/stat.h>\r\n#include <signal.h>\r\n#include <stdio.h>\r\n \r\n// 闹钟到时会执行此程序\r\nvoid sig_alarm(int signo)\r\n{\r\n       //关煤气炉\r\n       printf(“Close gas oven.\\n”);\r\n} \r\nvoid watching_tv()\r\n{\r\n       while(1)\r\n       {\r\n              // 呵呵，悠哉悠哉\r\n}\r\n}\r\n \r\n       int main()\r\n{\r\n// 点火后设置定时中断\r\n  printf(“Start to boil water, set Alarm”);\r\nif (signal( SIGALRM, sig_alrm ) == SIG_ERR)\r\n{\r\n    perror("signal(SIGALRM) error");\r\n    return -1;\r\n  }\r\n \r\n// 然后就可以欣赏电视节目了\r\n  printf(“Watching TV!\\n”);\r\n \r\nwatching_tv();\r\n \r\nreturn 0;\r\n}\r\n其实，计算机系统引入中断的原因不仅仅是为了适应I/O设备工作效率低的问题。例如，当计算机正在运行中，若出现突然掉电的情况，将会导致CPU中的全部信息丢失。倘若能在突然掉电的瞬间启动另一个备份电源，并迅速进行一些必要的处理，例如，将有用的信息送至不受电源影响的存储系统中，待电源恢复后接着使用，这种处理技术也要用终端技术来实现。又如，在实时控制领域中，要求CPU能及时响应外来信号的请求，并能完成相应的操作，也都需要终端技术实现。\r\n总之有了中断系统计算机的整体效率有了提升，能够应对突发事件实现实时控制\r\n\r\n1.4 中断技术差生的缺点\r\n\r\n\r\n举了上面的例子你也许就对中断有了一定的了解。同时在上面的例子中当有电话响了时候，你必须停下正在看的书去接电话，那么你就要记下现在看到哪里了。要不你回来的时候就不知道从哪开始看了。这也就出现了一个问题你怎么记住你现在看到的位置呢？当然你说可以凭借记忆，但是CPU是没有记忆功能的，一当有新的数据进来前面的数据就会被覆盖，那么前面的程序执行到哪了你就不知道了。\r\n\r\n由此可见中断系统是一个复杂的系统。为了实现中断系统激素啊你系统必须有相应的终端系统或终端机构。这样就造成了计算机系统的复杂性。同时不同公司之间的中断系统有着不同的差别这就要求硬件也相应的不同。所以还要有统一的中断标准。\r\n\r\n\r\n\r\n\r\n二：基本概念\r\n\r\n2.1 中断源\r\n我们把引起中断的原因，或者能够发出中断请求信号的来源统称为中断源。在上面看书的例子中，打断你看书的时间就是中断源（电话响了）。\r\n通常中断源有以下几种：\r\n　　（１）外部设备请求中断。一般的外部设备（如键盘、打印机和A / D转换器等）在完成自身的操作后，向CPU发出中断请求，要求CPU为他服务。　由计算机硬件异常或故障引起的中断，也称为内部异常中断。\r\n　　（２）故障强迫中断。计算机在一些关键部位都设有故障自动检测装置。如运算溢出、存储器读出出错、外部设备故障、电源掉电以及其他报警信号等，这些装置的报警信号都能使CPU中断，进行相应的中断处理。\r\n　　（３）实时时钟请求中断。在控制中遇到定时检测和控制，为此常采用一个外部时钟电路（可编程）控制其时间间隔。需要定时时，CPU发出命令使时钟电路开始工作，一旦到达规定时间，时钟电路发出中断请求，由CPU转去完成检测和控制工作。\r\n　　（4）数据通道中断。数据通道中断也称直接存储器存取（ＤＭＡ）操作中断，如磁盘、磁带机或ＣＲＴ等直接与存储器交换数据所要求的中断。\r\n　　（５）程序自愿中断。ＣＰＵ执行了特殊指令（自陷指令）或由硬件电路引起的中断是程序自愿中断，是指当用户调试程序时，程序自愿中断检查中间结果或寻找错误所在而采用的检查手段，如断点中断和单步中断等。\r\n2.2 中断嵌套\r\n\r\n \r\n中断嵌套指中断系统正在执行一个中断服务时，有另一个优先级更高的中断提出中断请求，这时会暂时终止当前正在执行的级别较低的中断源的服务程序，去处理级别更高的中断源，待处理完毕，再返回到被中断了中断服务程序继续执行，这个过程就是中断嵌套。\r\n\r\n关于中断嵌套。可以这样说，当一个中断正在执行的时候，如果事先设置了中断优先级寄存器IP，那么当一个更高优先级的中断到来的时候会发生中断嵌套，如果没有设置则不会发生任何嵌套；如果有同一个优先级的中断触发，它并不是在“不断的申请”，而是将它相应的中断标志位置即IE寄存器的某位置位，当CPU执行完当前中断之后，按照查询优先级重新去查询各个中断标志位，进入相应中断。\r\n2.3 中断级联\r\n一个外部中断请求信号通过中断请求线IRQ，传输到IMR（中断屏蔽寄存器），IMR根据所设定的中断屏蔽字（OCW1），决定是将其丢弃还是接受。如果可以接受，则8259A将IRR（中断请求暂存寄存器）中代表此IRQ的位置位，以表示此IRQ有中断请求信号，并同时向CPU的INTR（中断请求）管脚发送一个信号。但CPU这时可能正在执行一条指令，因此CPU不会立即响应。而当这CPU正忙着执行某条指令时，还有可能有其余的IRQ线送来中断请求，这些请求都会接受IMR的挑选。如果没有被屏蔽，那么这些请求也会被放到IRR中，也即IRR中代表它们的IRQ的相应位会被置1。\r\n　当CPU执行完一条指令时后，会检查一下INTR管脚是否有信号。如果发现有信号，就会转到中断服务，此时，CPU会立即向8259A芯片的INTA（中断应答）管脚发送一个信号。当芯片收到此信号后，判优部件开始工作，它在IRR中，挑选优先级最高的中断，将中断请求送到ISR（中断服务寄存器），也即将ISR中代表此IRQ的位置位，并将IRR中相应位置零，表明此中断正在接受CPU的处理。同时，将它的编号写入中断向量寄存器IVR的低三位（IVR正是由ICW2所指定的，不知你是否还记得ICW2的最低三位在指定时都是0，而在这里，它们被利用了！）这时，CPU还会送来第二个INTA信号，当收到此信号后，芯片将IVR中的内容，也就是此中断的中断号送上通向CPU的数据线。\r\n \r\n                       图2.3\r\n\r\n2.4 软中断，硬中断\r\n软中断:\r\n1.  编程异常通常叫做软中断\r\n2.  软中断是通讯进程之间用来模拟硬中断的 一种信号通讯方式。\r\n3.  中断源发中断请求或软中断信号后,CPU或接收进程在适当的时机自动进行中断处理或完成软中断信号对应的功能\r\n4.  软中断是软件实现的中断,也就是程序运行时其他程序对它的中断;而硬中断是硬件实现的中断,是程序运行时设备对它的中断。\r\n \r\n硬中断:\r\n1.  硬中断是由外部事件引起的因此具有随机性和突发性；软中断是执行中断指令产生的，无面外部施加中断请求信号，因此中断的发生不是随机的而是由程序安排好的。\r\n2.  硬中断的中断响应周期，CPU需要发中断回合信号（NMI不需要），软中断的中断响应周期，CPU不需发中断回合信号。\r\n3.  硬中断的中断号是由中断控制器提供的（NMI硬中断中断号系统指定为02H）；软中断的中断号由指令直接给出，无需使用中断控制器。\r\n4.  硬中断是可屏蔽的（NMI硬中断不可屏蔽），软中断不可屏蔽。\r\n\r\n区别:\r\n1.  软中断发生的时间是由程序控制的,而硬中断发生的时间是随机的\r\n2.  软中断是由程序调用发生的,而硬中断是由外设引发的\r\n3.  硬件中断处理程序要确保它能快速地完成它的任务,这样程序执行时才不会等待较长时间\r\n2.5 NMI（不可屏蔽中断）& 可屏蔽中断\r\n非屏蔽中断是出现在NMI线上的请求 ，不受标志位IF的影响，在当前指令执行完以后，CPU就响应。这种中断通常用于电源故障。非屏蔽中断的优先权高于屏蔽中断。\r\n　可屏蔽中断I/O设备发出的所有中断(IRQ)都可以产生可屏蔽中断，受标志位IF的影响，根据中断循序标志的设置来判断CPU是否响应中断请求。\r\n\r\n\r\n2.6 中断请求号 & 中断向量\r\n中断请求号就是中断编号。\r\n中断向量　中断服务程序的入口地址。在某些计算机中，中断向量的位置存放一条跳转到中断服务程序入口地址的跳转指令。\r\n2.7 中断响应INTA & 中断周期\r\n中断响应INTA:当8259A接收到第一个/INTA有效的负脉冲后，将被响应的中断源置入ISR（正在服务寄存器）的对应位，即ISR对应位置1，同时把IRR（中断请求寄存器）的对应位清0；\r\n当8259A接收到第二个/INTA有效的负脉冲后，就将其中断类型号送入数据总线。\r\n\r\n中短周期：当CPU采用中断方式实现I/O交换信息时，CPU在每条指令执行结束之后检查是否又中断请求，如果有就执行中断响应，又称中短周期。\r\n2.8 单步中断 & IF中断允许标志位\r\n单步中断：执行一条指令中断一次。\r\nIF中断允许标志位：标识寄存器中的一位，可以屏蔽 可屏蔽中断请求INTR\r\n如果外设有可屏蔽中断请求INTR，而此时CPU内IF=0，那么CPU不会响应中断\r\n\r\n只有可屏蔽中断请求INTR和IF有关系，\r\n内中断和不可屏蔽中断NMI，都不受IF的影响\r\n2.9 IMR中断屏蔽字  & 中断优先级\r\nIMR中断屏蔽字：以实现对各中断的屏蔽。\r\n中断优先级：为使系统能及时响应并处理发生的所有中断，系统根据引起中断事件的重要性和紧迫程度，硬件将中断源分为若干个级别，称作中断优先级。\r\n2.10   中断控制器 & APIC \r\n中断控制器：中断控制器的功能就是在多个中断源的系统中，接收外部的中断请求，并进行判断，选中当前优先级最高的中断请求，再将此请求送到CPU的INTR端;当CPU响应中断并进入中断子程序的处理过程后，中断控制器仍负责外部的中断请求的管理。比如当某个外部中断的请求的优先级高于当前正在处理的中断优先级时，中断控制器会让此中断通过而到达CPU的INTR端，从而实现中断的嵌套，反之，对其它的级别较底的中断则给予禁止。\r\n\r\nAPIC:高级可编程中断控制器\r\nAPIC 是装置的扩充组合用来驱动 Interrupt 控制器。在目前的建置中，系统的每一个部份都是经由 APIC Bus 连接的。"本机 APIC" 为系统的一部份，负责传递 Interrupt 至指定的处理器；举例来说，当一台机器上有三个处理器则它必须相对的要有三个本机 APIC。自 1994 年的 Pentium P54c 开始Intel 已经将本机 APIC 建置在它们的处理器中。实际建置了 Intel 处理器的电脑就已经包含了 APIC 系统的部份。\r\n\r\n2.11  中断共享 & 中断冲突\r\n	中断共享就是某些端口公用一个中断请求，以前主板有很多PCI,第一和第五个常常共享，但只能使用其中一个，都是用会造成硬件冲突	\r\n	中断冲突终端之间共用资源发生冲突。\r\n2.12  MSI-X中断（PCIe）、中断处理子程序\r\nMSI-X 中断是 MSI 中断的增强版本，与 MSI 中断有相同功能，具有以下关键区别：\r\n每个设备最多支持 2048 个 MSI-X 中断向量。\r\n每个中断向量的地址和数据项都是唯一的。\r\nMSI-X 支持按函数屏蔽和按向量屏蔽。\r\n中断处理子程序：处理中断请求的程序\r\n2.13  0号中断、1号中断\r\n0号中断：号中断处理程序用于处理除法运算溢出，称为"除数为0中断"。当CPU检测到除法运算溢出，自动调用0号中断处理程序，无"INT 0"指令。\r\n1号中断：当CPU的TF标志置1时，CPU每执行一条指令，就调用1号中断处理程序，因此，它称为"单步中断"。 当CPU检测到TF=1时，自动进入单步方式，无"INT 1"指令。 该中断处理程序用于调试程序。 \r\n\r\n2.14  中断描述符、中断描述符表\r\n中断描述符：描述中断的一组数据，包括中断号等。\r\n中断描述表：将每个异常或中断向量分别与它们的处理过程联系起来。与GDT和LDT表类似，IDT也是由8字节长描述符组成的一个数组。\r\n\r\n2.15  异常\r\n中断通常分为同步中断和异步中断。\r\n同步中断：当指令执行时由CPU控制单元产生的，称为同步，是因为只有当一条指令终止执行后CPU才会发出中断。\r\n异步中断：由其他硬件设备依照CPU时钟信号随机产生的。\r\n\r\n2.16  中断门、OS的事件、消息\r\n通过中断门的转移和通过陷阱门的转移之间的差别只是对IF标志的处理。对于中断门，在转移过程中把IF置为0，使得在处理程序执行期间屏蔽掉INTR中断(当然，在中断处理程序中可以人为设置IF标志打开中断，以使得在处理程序执行期间允许响应可屏蔽中断)；对于陷阱门，在转移过程中保持IF位不变，即如果IF位原来是1，那么通过陷阱门转移到处理程序之后仍允许INTR中断。因此，中断门最适宜于处理中断，而陷阱门适宜于处理异常。OS的事件就是操作系统事件。\r\n消息：消息，软件对象之间进行交互作用和通讯是利用消息的\r\n\r\n三：中断资源相关\r\n\r\n3.1  我的电脑中断相关资源占用情况\r\n \r\n \r\n \r\n \r\n\r\n\r\n3.2 ISA中断\r\n \r\n\r\n \r\n \r\n \r\n\r\n\r\n3.3 PCI中断\r\n\r\n \r\n\r\n3.4 IRQ 0-15中断请求外的\r\n其他是microsoft acpi-compliant system的。微软ACPI-Compliant系统，全名Advanced Configuration and Power Management Interface\r\nACPI表示高级配置和电源管理接口（Advanced Configuration and Power Management Interface）。对于Windows2000，ACPI定义了Windows 2000、BIOS和系统硬件之间的新型工作接口。这些新接口包括允许Windows 2000控制电源管理和设备配置的机制。 ACPI意图是让系统而不是BIOS来全面控制电源管理，使系统更加省电。 其特点主要有：提供立刻开机功能，即开机后可立即恢复到上次关机时的状态，光驱、软驱和硬盘在未使用时会自动关掉电源，使用时再打开；支持在开电状态下既插即拔，随时更换功能。\r\n\r\n四：中断系统\r\n\r\n\r\n4.1 中断系统怎样协调完成中断过程\r\n中断过程：中断请求，中断判优，中断响应，中断处理，中断返回\r\n \r\n                          图4.1中断过程\r\nCPU执行完一条指令后，下一条指令的逻辑地址存放在cs和eip这对寄存器中。在执行新指令前，控制单元会检查在执行前一条指令的过程中是否有中断或异常发生。如果有，控制单元就会抛下指令，进入下面的流程：\r\n1.确定与中断或异常关联的向量i (0--255)\r\n2.寻找向量对应的处理程序\r\n3.保存当前的“工作现场”，执行中断或异常的处理程序\r\n4.处理程序执行完毕后，把控制权交还给控制单元\r\n5.控制单元恢复现场，返回继续执行原程序\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n中断控制器执行下列动作：\r\n1，监视IRQ线，对引发信号检查\r\n2，如果一个引发信号出现在IRQ线上\r\na，把此信号转换成对应的中断向量\r\nb，把这个向量存放在中断控制器的一个I/O端口，从而允许CPU通过数据总线读这个向量\r\nc，把引发信号发送到处理器的INTR引脚，即产生一个中断\r\nd，等待，直到CPU应答这个信号；收到应答后，清INTR引脚\r\n3，返回到第一步\r\n\r\nWindows 2000在系统启动时填写IDT表\r\n\r\n当中断发生时，处理器将会根据IDT将控制转移给适当的中断/异常处理\r\n五：多处理器系统的中断\r\n\r\n5.1 怎么连接\r\n对于多核CPU，优化操作系统任务调度算法是保证效率的关键。一般任务调度算法有全局队列调度和局部队列调度。前者是指操作系统维护一个全局的任务等待队列，当系统中有一个CPU核心空闲时，操作系统就从全局任务等待队列中选取就绪任务开始在此核心上执行。\r\n　　这种方法的优点是CPU核心利用率较高。后者是指操作系统为每个CPU内核维护一个局部的任务等待队列，当系统中有一个CPU内核空闲时，便从该核心的任务等待队列中选取恰当的任务执行，这种方法的优点是任务基本上无需在多个CPU核心间切换，有利于提高CPU核心局部Cache命中率。目前多数多核CPU操作系统采用的是基于全局队列的任务调度算法。\r\n多核的中断处理和单核有很大不同。多核的各处理器之间需要通过中断方式进行通信，所以多个处理器之间的本地中断控制器和负责仲裁各核之间中断分配的全局中断控制器也需要封装在芯片内部。\r\n另外,多核CPU是一个多任务系统。由于不同任务会竞争共享资源，因此需要系统提供同步与互斥机制。而传统的用于单核的解决机制并不能满足多核，需要利用硬件提供的“读－修改－写”的原子操作或其他同步互斥机制来保证。\r\n5.1 如何处理\r\n采用轮询的方式，基本上每个CPU平均分担。但是为什么查看自己的机器，如果不设置CPU亲和，不设置irqbalance的话，所有的中断都是在CPU0上响应的。\r\n\r\n\r\n\r\n\r\n\r\n六：硬件、软件是怎么配合完成中断处理的\r\n\r\n\r\n \r\n\r\n\r\n当用户按键时，键盘接口会得到一个代表该按键的键盘扫描码，同时产生一个中断请求。键盘中断服务程序先从键盘接口取得按键的扫描码，然后根据其扫描码判断用户所按的键并作相应的处理，最后通知中断控制器本次中断结束并实现中断返回。\r\n\r\n   若用户按下双态键(如：Caps Lock、Num Lock和Scroll Lock等)，则在键盘上相应LED指示灯的状态将发生改变；\r\n若用户按下控制键(如：Ctrl、Alt和Shift等)，则在键盘标志字中设置其标志位。\r\n\r\n   若用户按下功能键(如：F1、F2、…等)，再根据当前是否又按下控制键来确定其系统扫描码，并把其系统扫描码和一个值为0的字节存入键盘缓冲区。\r\n\r\n若用户按下字符键(如：A、1、+、…等)，此时，再根据当前是否又按下控制键来确定其系统扫描码，并得到该按键所对应的ASCII码，然后把其系统扫描码和ASCII码一起存入键盘缓冲区；\r\n若用户按下功能请求键(如：Print Screen等)，则系统直接产生一个具体的动作。\r\n\r\n4、DOS功能中的键盘输入\r\n\r\n键盘输入是一种最常用的输入方式，所以，在DOS操作系统中，提供了能实现各种键盘输入的功能(Windows操作系统中仍然能用)。INT 21H中的\r\n\r\n相关功能如下：\r\n01H——带回显的键盘输入06H——控制台的输入/输出：当DL=0FFH，表示键盘输入\r\n07H——不回显、不过滤的键盘输入08H——不回显的键盘输入\r\n0AH——键盘输入字符串0BH——检查键盘输入状态\r\n0CH——清除输入缓冲区的输入功能\r\n有关中断功能的详细描述和调用参数在此从略，需要查阅者可参阅附录3之字符功能调用类。\r\n\r\n5、BIOS中的键盘输入\r\n\r\n在BIOS系统中，提供了中断16H来实现键盘输入功能。其具体的功能如下：\r\n00H、10H——从键盘读一个字符，输入字符不回显\r\n01H、11H——判断键盘缓冲区内是否有字符可读\r\n02H——读取当前键盘状态字\r\n有关中断功能的详细描述和调用参数在此从略，需要查阅者可参阅附录3之键盘服务。\r\n\r\n\r\n七：编写8251查询发送、中断接收的自检程序 \r\n\r\n查询发送程序：\r\nCSEG 	SEFMENT\r\n		ASSUME CS:CSEG,DS:CSEG\r\nTRA		PROC FAR\r\nSTART:	MOV DX,309H\r\n		MOV AL,00H\r\n		OUT DX,AL\r\n		MOV AL,40H\r\n		OUT DX,AL\r\n		NOP\r\n		MOV AL,0CFH\r\n		\r\n		OUT DX,AL\r\n		MOV AL,37H\r\n		OUT DX,AL\r\n		MOV CX,2DH\r\n		MOV SI,300H\r\nL1:		MOV DX,309H\r\n		IN AL,DX\r\n		AND AL,01H\r\n		JZ L1\r\n		MOV DX,308H\r\n		MOV AL,[SI]\r\n		OUT DX,AL\r\n		INC SI\r\n		DEC CX\r\n		JNZ L1\r\n		MOV AX,4C00H\r\n		INT 21H\r\nTRA		ENDP\r\nCSEG 	ENDS\r\n		END START\r\n接收程序：\r\nSCEG	SEGMENT\r\n		ASSUME CS:REC,DS:SCEG\r\nREC		PROC	FAR\r\nBEGIN:	MOV DX,309H\r\n		MOV AL,00H\r\n		OUT DX,AL\r\n		MOV AL,50H\r\n		OUT DX,AL\r\n		NOP\r\n		MOV AL,0CFH\r\n		OUT DX,AL\r\n		MOV AL,14H\r\n		OUT DX,AL\r\n		MOV CX,2DH\r\n		MOV DI,400H\r\nL2:		MOV DX,309H\r\n		IN AL,DX\r\n		TEST AL,38H\r\n		JNZ ERR\r\n		AND AL,02H\r\n		JZ L2\r\n		MOV DX,308H\r\n		IN AL,DX\r\n		MOV [DI],AL\r\n		INC DI\r\n		LOOP L2\r\n		JMP STOP\r\nERR:\r\nSTOP:	MOV AX,4C00H\r\n		INT 21H\r\nREC		ENDP\r\nCSEG	ENDS\r\n		END BEGIN\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n参考资料：\r\n\r\n维基百科：中断相关\r\n百度百科：中断相关\r\n计算机组成原理—唐朔飞著\r\n微型计算机接口技术及应用\r\n', 30, 0);
INSERT INTO `lib_book_content` (`id`, `content`, `barcode`, `isdelete`) VALUES
(2, '<div>\r\n<div align="right" style="text-align:right;text-indent:24.0pt;line-height:19.0pt;"><img width="46" height="113" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image001.gif" alt="文本框: 张   三" v:shapes="_x0000_s1032" v:dpi="96" />               <span style="\r\nposition:absolute;z-index:251659264;left:0px;margin-left:0px;margin-top:0px;\r\nwidth:46px;height:367px"><img width="46" height="367" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="文本框: 哈尔滨哈飞集团汽车博物馆设计" v:shapes="_x0000_s1033" v:dpi="96" /><img width="747" height="367" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image003.gif" alt="文本框: 哈尔滨哈飞集团汽车博物馆设计" v:shapes="_x0000_s1026 _x0000_s1027" />               <img width="243" height="139" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image004.gif" v:shapes="_x0000_s1028 _x0000_s1029 _x0000_s1030 _x0000_s1031" alt="" />          <img width="45" height="153" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image005.gif" alt="文本框: 本科毕业设计（论文）" v:shapes="_x0000_s1034" v:dpi="96" />                 <span style="position:absolute;left:0pt;z-index:251661312">\r\n<table cellpadding="0" cellspacing="0" width="100%">\r\n    <tbody>\r\n        <tr>\r\n            <td>\r\n            <div v:shape="_x0000_s1035" style="padding:3.6pt 7.2pt 3.6pt 7.2pt">\r\n            <p align="left"><span style="font-size:14.0pt;font-family:黑体">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size:\r\n            14.0pt;font-family:黑体">年&nbsp;&nbsp;&nbsp;&nbsp; 月</span></p>\r\n            </div>\r\n            <div align="left">&nbsp;</div>\r\n            <div align="left">&nbsp;</div>\r\n            </td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n</span>&nbsp;     &nbsp;\r\n<p>&nbsp;</p>\r\n<div style="text-indent:24.0pt;\r\nline-height:19.0pt;layout-grid-mode:char;">&nbsp;</div>\r\n<div align="center" style="margin-top:12.0pt;text-align:center;\r\ntext-indent:44.0pt;line-height:19.0pt;">&nbsp;</div>\r\n<div align="center" style="margin-top:12.0pt;text-align:center;\r\ntext-indent:44.0pt;line-height:19.0pt;">&nbsp;</div>\r\n<br clear="ALL" />\r\n<div align="center" style="text-align:center"><b><span style="font-size:22.0pt;font-family:黑体;Times New Roman&quot;">计算机中断技术大作业</span></b></div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;"><b>&nbsp;</b></div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;"><b>&nbsp;</b></div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;"><b>&nbsp;</b></div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;"><b>&nbsp;</b></div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;"><b>&nbsp;</b></div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;"><b><span style="font-size:18.0pt;line-height:125%;font-family:宋体;Times New Roman&quot;;Times New Roman&quot;">代</span></b><b>&nbsp;</b><b><span style="font-size:18.0pt;line-height:\r\n125%;font-family:宋体;Times New Roman&quot;;Times New Roman&quot;">东</span></b></div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;">&nbsp;</div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;">&nbsp;</div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;">&nbsp;</div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;">&nbsp;</div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;">&nbsp;</div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;">&nbsp;</div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;">&nbsp;</div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;">&nbsp;</div>\r\n<div style="line-height:125%;layout-grid-mode:char;">&nbsp;</div>\r\n<div style="line-height:125%;layout-grid-mode:char;">&nbsp;</div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;">&nbsp;</div>\r\n<div align="left" style="margin-right: -11.9pt; text-indent: 72pt; line-height: 125%; "><span style="font-family:黑体;Times New Roman&quot;;Times New Roman&quot;">院</span> <span style="font-family:黑体;Times New Roman&quot;;Times New Roman&quot;">（系）：计算机学院</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="font-family:黑体;Times New Roman&quot;;Times New Roman&quot;">专</span>&nbsp;&nbsp;&nbsp; <span style="font-family:\r\n黑体;Times New Roman&quot;;Times New Roman&quot;">业：计算机科学与技术类</span></div>\r\n<div align="left" style="margin-right: -11.9pt; line-height: 125%; ">&nbsp;</div>\r\n<div align="left" style="margin-right: 0.75pt; text-indent: 72pt; line-height: 125%; "><span style="font-family:黑体;Times New Roman&quot;;Times New Roman&quot;">学　　号：</span>1100300829&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="font-family:黑体;Times New Roman&quot;;Times New Roman&quot;">指导教师：史先俊</span></div>\r\n<div align="left" style="margin-right: 67pt; line-height: 125%; ">&nbsp;</div>\r\n<div align="left" style="margin-right: 67pt; line-height: 125%; ">&nbsp;</div>\r\n<div align="center" style="text-align:center;layout-grid-mode:char;"><b><span style="font-size:14.0pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;2012</b><b><span style="font-family:宋体;Times New Roman&quot;;Times New Roman&quot;">年</span>10</b><b><span style="font-family:宋体;Times New Roman&quot;;Times New Roman&quot;">月</span></b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;"><b>&nbsp;</b></div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;"><b>&nbsp;</b></div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;"><b>&nbsp;</b></div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;"><b>&nbsp;</b></div>\r\n<div align="center" style="text-align:center;line-height:125%"><a name="_Toc8970076"><span style="font-size:10.5pt;line-height:125%"><img width="329" height="60" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image007.jpg" v:shapes="_x0000_i1025" alt="" /></span></a></div>\r\n<div align="center" style="text-align:center;line-height:125%">&nbsp;</div>\r\n<div align="center" style="text-align:center;line-height:125%">&nbsp;</div>\r\n<div align="center" style="margin-right:87.9pt;text-align:center;\r\nline-height:12.0pt;"><b>&nbsp;</b></div>\r\n<div align="center" style="margin-right:.2pt;text-align:center;\r\nline-height:125%"><b><span style="font-size:42.0pt;line-height:125%;font-family:华文新魏;Times New Roman&quot;;letter-spacing:1.0pt;">大作业</span></b></div>\r\n<div align="center" style="text-align:center;line-height:125%">&nbsp;</div>\r\n<div align="center" style="text-align:center;line-height:125%">&nbsp;</div>\r\n<div align="center" style="text-align:center;line-height:125%">&nbsp;</div>\r\n<div align="center" style="text-align:center;line-height:125%">&nbsp;</div>\r\n<div style="line-height:125%">&nbsp;</div>\r\n<div style="text-indent:67.15pt;\r\nline-height:175%"><span style="font-size:18.0pt;line-height:175%;font-family:\r\n黑体;Times New Roman&quot;;Times New Roman&quot;">题</span><span style="font-size:18.0pt;line-height:175%;"> &nbsp;&nbsp;&nbsp;&nbsp;</span><span style="font-size:18.0pt;line-height:175%;font-family:黑体;Times New Roman&quot;;Times New Roman&quot;">目</span>&nbsp;<u><span style="font-size:18.0pt;line-height:175%;font-family:\r\n黑体;Times New Roman&quot;;Times New Roman&quot;">深入理解中断系统</span></u><u>&nbsp;</u></div>\r\n<div style="text-indent:67.15pt;\r\nline-height:175%"><u>&nbsp;</u></div>\r\n<div style="text-indent:67.15pt;\r\nline-height:175%"><u>&nbsp;</u></div>\r\n<div style="text-indent:52.2pt;\r\nline-height:175%">&nbsp;</div>\r\n<div style="text-indent:63.3pt;\r\nline-height:125%">&nbsp;</div>\r\n<div style="text-indent:63.3pt;\r\nline-height:125%">&nbsp;</div>\r\n<div style="text-indent:67.2pt;\r\nline-height:175%"><span style="font-size:15.0pt;line-height:175%;font-family:\r\n黑体;Times New Roman&quot;;Times New Roman&quot;">专</span><span style="font-size:15.0pt;line-height:175%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size:15.0pt;\r\nline-height:175%;font-family:黑体;Times New Roman&quot;;Times New Roman&quot;">业</span><span style="font-size:15.0pt;\r\nline-height:175%;"> <u>&nbsp;&nbsp;</u></span><u><span style="font-size:15.0pt;line-height:175%;font-family:黑体;Times New Roman&quot;;Times New Roman&quot;">计算机科学与技术</span></u><u><span style="font-size:15.0pt;line-height:175%;">&nbsp;&nbsp;&nbsp;&nbsp; </span></u></div>\r\n<div style="text-indent:67.2pt;\r\nline-height:175%;"><span style="font-size:15.0pt;line-height:175%;font-family:\r\n黑体;Times New Roman&quot;;Times New Roman&quot;">学　　</span><span style="font-size:15.0pt;line-height:175%;">&nbsp;&nbsp; </span><span style="font-size:15.0pt;\r\nline-height:175%;font-family:黑体;Times New Roman&quot;;Times New Roman&quot;">号</span><span style="font-size:15.0pt;\r\nline-height:175%;"> <u>&nbsp;&nbsp;&nbsp;1100300829&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </u></span></div>\r\n<div style="text-indent:67.2pt;\r\nline-height:175%;"><span style="font-size:15.0pt;line-height:175%;font-family:\r\n黑体;Times New Roman&quot;;Times New Roman&quot;">学</span><span style="font-size:15.0pt;line-height:175%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size:15.0pt;\r\nline-height:175%;font-family:黑体;Times New Roman&quot;;Times New Roman&quot;">生</span><span style="font-size:15.0pt;\r\nline-height:175%;"> <u>&nbsp;&nbsp;&nbsp;&nbsp;</u></span><u><span style="font-size:15.0pt;line-height:175%;font-family:黑体;Times New Roman&quot;;Times New Roman&quot;">代</span></u><u><span style="font-size:15.0pt;line-height:175%;">&nbsp;&nbsp;&nbsp;&nbsp; </span></u><u><span style="font-size:15.0pt;\r\nline-height:175%;font-family:黑体;Times New Roman&quot;;Times New Roman&quot;">东</span></u><u><span style="font-size:15.0pt;line-height:175%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></u></div>\r\n<div style="text-indent:67.2pt;\r\nline-height:175%;"><span style="font-size:15.0pt;line-height:175%;font-family:\r\n黑体;Times New Roman&quot;;Times New Roman&quot;">指</span><span style="font-size:15.0pt;line-height:175%;font-family:黑体;Times New Roman&quot;;Times New Roman&quot;">导</span><span style="font-size:15.0pt;line-height:175%;font-family:黑体;Times New Roman&quot;;Times New Roman&quot;">教</span><span style="font-size:15.0pt;line-height:175%;font-family:黑体;Times New Roman&quot;;Times New Roman&quot;">师</span><span style="font-size:15.0pt;\r\nline-height:175%;"> <u>&nbsp;&nbsp;&nbsp;&nbsp;</u></span><u><span style="font-size:15.0pt;line-height:175%;font-family:黑体;Times New Roman&quot;;Times New Roman&quot;;">史先俊</span></u><u><span style="font-size:15.0pt;line-height:175%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></u></div>\r\n<div style="text-indent:24.0pt;\r\nline-height:19.0pt;layout-grid-mode:char;"><span style="position:absolute;\r\nleft:0pt;z-index:251662336">\r\n<table cellpadding="0" cellspacing="0" width="100%">\r\n    <tbody>\r\n        <tr>\r\n            <td>\r\n            <div v:shape="_x0000_s1036" style="padding:3.6pt 7.2pt 3.6pt 7.2pt">\r\n            <p><img width="36" height="20" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image009.gif" v:shapes="_x0000_i1041" alt="" /></p>\r\n            </div>\r\n            </td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n</span>&nbsp;\r\n<p>&nbsp;</p>\r\n</div>\r\n<span style="font-size:12.0pt;font-family:&quot;Times New Roman&quot;,&quot;serif&quot;;"><br clear="all" style="page-break-before:always;" />\r\n</span>\r\n<div align="center" style="text-align:center"><a name="_Toc225579639"><span style="font-family:宋体;">目</span></a>&nbsp; <span style="font-family:宋体;">录</span></div>\r\n<div><img width="552" height="241" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image010.gif" v:shapes="_x0000_i1026" alt="" /></div>\r\n<div style="text-indent:27.0pt;\r\nline-height:125%;layout-grid-mode:char;"><span style="font-size: 12pt; line-height: 125%; background-color: white; background-position: initial initial; background-repeat: initial initial; ">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; line-height: 125%; background-color: white; background-position: initial initial; background-repeat: initial initial; ">图1.1中断处理过程</span></div>\r\n<div style="text-indent:27.0pt;\r\nline-height:125%;layout-grid-mode:char;">&nbsp;</div>\r\n<div style="text-indent:27.0pt;\r\nline-height:125%;layout-grid-mode:char;">&nbsp;</div>\r\n<div style="text-indent:27.0pt;\r\nline-height:125%;layout-grid-mode:char;"><span style="font-size: 12pt; line-height: 125%; background-color: white; background-position: initial initial; background-repeat: initial initial; ">打一个不太恰当的比方。比如说你正在看书那么你就是CPU，看书就相当于你正在执行的程序，当你电话响了或者是有其他的事情发生导致你必须停下正在看的书去做另一件事（接电话）。那么这就是一个中断，在这个中断中现行程序是看书，中断时电话响了，CPU是你自己。当你接完电话之后（假设接完电话就没其他特殊的事了）那么你就回去看书，也就相当于定义中的返回执行原程序。</span></div>\r\n<div style="text-indent:27.0pt;\r\nline-height:125%;layout-grid-mode:char;">&nbsp;</div>\r\n<div><b><font size="5"><a name="_Toc337808157">1.2 中断技术差生的原因</a></font></b></div>\r\n<div>&nbsp;</div>\r\n<div style="text-indent:21.0pt;"><span style="font-family: 宋体; ">讲了上面的内容也许你对中断概念有了一定的了解。那么为什么会产生中断呢？</span></div>\r\n<div style="text-indent:21.0pt;"><span style="font-family: 宋体; ">为了介绍为什么会产生中断我们有必要对计算机的组成结构和工作的过程来了解一下。下图是计算机的组成结构。</span></div>\r\n<div style="text-indent:21.0pt;">&nbsp;</div>\r\n<div style="text-indent:21.0pt;"><span style="font-family: 宋体; "><img width="567" height="288" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image012.jpg" v:shapes="_x0000_i1027" alt="" /></span></div>\r\n<div style="text-indent:21.0pt;"><span style="font-family: 宋体; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-family: 宋体; ">图1.2计算机组成结构</span></div>\r\n<div style="text-indent:21.0pt;">&nbsp;</div>\r\n<div style="margin-left:21.0pt;text-indent:21.0pt;"><span style="font-family: 宋体; ">可以看到计算机石油输入输出设备控制器运算器和存储器组成的，那么计算机是如何工作的呢？</span></div>\r\n<div style="margin-left:21.0pt;text-indent:21.0pt;">&nbsp;</div>\r\n<div style="margin:0cm;margin-bottom:.0001pt;text-indent:24.0pt;line-height:19.5pt;\r\nbackground:#FEFFF8"><span style="font-family:&quot;Adobe 楷体 Std R&quot;,&quot;serif&quot;;\r\ncolor:#333333">计算机工作时，首先由键盘等输入设备。输入程序和数据，程序和数据信息，通过J/O接口电路，经数据总线送入主存贮器中，接着CPU开始运行输入的指令，并处理输入的数据。CPU要进行下列工作：</span></div>\r\n<div style="margin:0cm;margin-bottom:.0001pt;text-indent:24.0pt;line-height:19.5pt;\r\nbackground:#FEFFF8"><span style="font-family:&quot;Adobe 楷体 Std R&quot;,&quot;serif&quot;;\r\ncolor:#333333">⑴将指令的地址放到地址总线；</span></div>\r\n<div style="margin:0cm;margin-bottom:.0001pt;text-indent:24.0pt;line-height:19.5pt;\r\nbackground:#FEFFF8"><span style="font-family:&quot;Adobe 楷体 Std R&quot;,&quot;serif&quot;;\r\ncolor:#333333">⑵按着上述地址，通过数据总线在主存贮器中找到并取出指令，由指令译码器对该指令进行分析译码；</span></div>\r\n<div style="margin:0cm;margin-bottom:.0001pt;text-indent:24.0pt;line-height:19.5pt;\r\nbackground:#FEFFF8"><span style="font-family:&quot;Adobe 楷体 Std R&quot;,&quot;serif&quot;;\r\ncolor:#333333">⑶根据译码结果，取出指令所要处理的数据地址及相应的数据；</span></div>\r\n<div style="margin:0cm;margin-bottom:.0001pt;text-indent:24.0pt;line-height:19.5pt;\r\nbackground:#FEFFF8"><span style="font-family:&quot;Adobe 楷体 Std R&quot;,&quot;serif&quot;;\r\ncolor:#333333">⑷执行指令所代表的具体操作；</span></div>\r\n<div style="margin:0cm;margin-bottom:.0001pt;text-indent:24.0pt;line-height:19.5pt;\r\nbackground:#FEFFF8"><span style="font-family:&quot;Adobe 楷体 Std R&quot;,&quot;serif&quot;;\r\ncolor:#333333">⑸检查是否还有其它的控制信号，若有，则对定进行处理；</span></div>\r\n<div style="margin:0cm;margin-bottom:.0001pt;text-indent:24.0pt;line-height:19.5pt;\r\nbackground:#FEFFF8"><span style="font-family:&quot;Adobe 楷体 Std R&quot;,&quot;serif&quot;;\r\ncolor:#333333">⑹把执行指令后所得的指令结果、状态的标志信号、控制信号和定时信号提供给整个微机系统；</span></div>\r\n<div style="margin:0cm;margin-bottom:.0001pt;text-indent:24.0pt;line-height:19.5pt;\r\nbackground:#FEFFF8"><span style="font-family:&quot;Adobe 楷体 Std R&quot;,&quot;serif&quot;;\r\ncolor:#333333">⑺继续处理用户输入的程序和数据。</span></div>\r\n<div style="margin-left:21.0pt;text-indent:21.0pt;">&nbsp;</div>\r\n<div style="text-indent:21.0pt;"><span style="font-family: 宋体; ">可以看到上在计算机工作过程中要始终检查有没有控制信号，而这控制信号中就有关于中断的控制信号。</span></div>\r\n<div style="text-indent:21.0pt;"><span style="font-family: 宋体; ">在计算机系统中中断的例子有很多。用户敲击键盘，每击一次键都要产生一个中断信号。告诉CPU有&ldquo;键盘输入发生了&rdquo;，要求CPU读入键值。至于为什么必须要读入键值呢？其实很简单，在执行程序和用户控制两个事件之间显然是用户控制事件的优先级要高于执行程序的优先级。要不你按下键盘电脑半天没有反应那你还不得把电脑踢了？</span></div>\r\n<div style="text-indent:21.0pt;">&nbsp;</div>\r\n<div style="text-indent:21.0pt;"><span style="font-family: 宋体; ">以I/O中断为例。</span></div>\r\n<div style="text-indent:21.0pt;">&nbsp;</div>\r\n<div style="text-indent:21.0pt;"><span style="font-family: 宋体; ">在I/O设备与主机交换信息时，由于设备本身机电特性的影响，其工作效率较低，与CPU无法匹配。因此，CPU启动之设备之后，往往需要等待一段时间才能实现与I/O设备之间的信息交换。如果在设备准备同时，CPU不做无所谓的等待，而继续执行现行程序，只有当I/O设备就绪向CPU提出请求后在暂时中断CPU现行程序转入I/O服务程序，这便产生了I/O中断。</span></div>\r\n<div style="margin-top:4.8pt;margin-right:0cm;margin-bottom:6.0pt;margin-left:\r\n0cm;text-indent:21.0pt;line-height:13.8pt;background:white">中断是用以提高计算机工作效率、增强计算机功能的一重要技术。最初引入硬件中断，只是出于性能上的考量。如果计算机系统没有中断，则处理器与外部设备通信时，它必须在向该设备发出指令后进行忙等待(Busy waiting，反复轮询该设备是否完成了动作并返回结果。这就造成了大量处理器周期被浪费。引入中断以后，当处理器发出设备请求后就可以立即返回以处理其他任务，而当设备完成动作后，发送中断信号给处理器，后者就可以再回过头获取处理结果。这样，在设备进行处理的周期内，处理器可以执行其他一些有意义的工作，而只付出一些很小的、切换上下文所引发的时间代价。后来被用于CPU外部与内部紧急事件的处理、机器故障的处理、时间控制等多个方面，并产生通过软件方式进入中断处理（软中断）的概念。。</div>\r\n<div style="text-indent:21.0pt;">&nbsp;</div>\r\n<div><b><font size="5"><a name="_Toc337808158">1.3 中断技术差生的优点</a></font></b></div>\r\n<div style="text-indent:21.0pt;"><span style="font-family: 宋体; ">先让我们感受一下中断机制对并发处理带来的帮助。</span></div>\r\n<div style="text-indent:21.0pt;">&nbsp;</div>\r\n<div style="text-indent:21.0pt;"><span style="font-family: 宋体; ">让我们用程序来探讨一下烧水问题，如果没有&ldquo;中断&rdquo;（注意，我们这里只是模仿中断的场景，实际上是用异步事件&mdash;&mdash;消息&mdash;&mdash;处理机制来展示中断产生的效果。毕竟，在用户空间没有办法与实际中断产生直接联系，不过操作系统为用户空间提供的异步事件机制，可以看作是模仿中断的产物），设计如下：</span></div>\r\n<div style="text-indent:21.0pt;">void&nbsp;StayInKitchen()</div>\r\n<div style="text-indent:21.0pt;">{</div>\r\n<div style="margin-left:21.0pt;text-indent:21.0pt;">bool&nbsp;WaterIsBoiled&nbsp;= false;</div>\r\n<div style="margin-left:21.0pt;text-indent:21.0pt;">while&nbsp;(&nbsp;WaterIsBoiled&nbsp;!= true )</div>\r\n<div style="margin-left:21.0pt;text-indent:21.0pt;">{</div>\r\n<div style="margin-left:21.0pt;text-indent:21.0pt;">&nbsp;&nbsp;&nbsp;bool&nbsp;VaporGavenOff&nbsp;&nbsp;= false;</div>\r\n<div style="margin-left:21.0pt;text-indent:21.0pt;">&nbsp;</div>\r\n<div style="text-indent:21.0pt;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(VaporGavenOff&nbsp;)</div>\r\n<div style="text-indent:21.0pt;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WaterIsBoiled&nbsp;&nbsp;=&nbsp;true;</div>\r\n<div style="margin-left:42.0pt;\r\ntext-indent:39.0pt;">else</div>\r\n<div style="margin-left:21.0pt;text-indent:21.0pt;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WaterIsBoiled&nbsp;&nbsp;=&nbsp;false;</div>\r\n<div style="margin-left:21.0pt;text-indent:21.0pt;">}</div>\r\n<div style="margin-left:21.0pt;text-indent:21.0pt;"><span style="font-family: 宋体; ">//&nbsp;</span><span style="font-family: 宋体; ">关煤气炉</span></div>\r\n<div style="margin-left:21.0pt;text-indent:21.0pt;">printf(&ldquo;Close gas oven.\\n&rdquo;);</div>\r\n<div style="margin-left:10.5pt;text-indent:31.5pt;"><span style="font-family: 宋体; ">//&nbsp;</span><span style="font-family: 宋体; ">一切安定下来，终于可以看电视了，10分钟的宝贵时间啊，逝者如斯夫&hellip;</span></div>\r\n<div style="margin-left:10.5pt;text-indent:31.5pt;">watching_tv();</div>\r\n<div style="margin-left:21.0pt;text-indent:21.0pt;">return;</div>\r\n<div style="text-indent:21.0pt;">}</div>\r\n<div style="text-indent:21.0pt;"><span style="font-family: 宋体; ">可以看出，整个流程如同我们前面描述的一样，所有工作要顺序执行，没有办法完成并发任务。</span></div>\r\n<div style="text-indent:21.0pt;">&nbsp;</div>\r\n<div style="text-indent:21.0pt;"><span style="font-family: 宋体; ">如果用&ldquo;中断&rdquo;，在开始烧水的时候设定一个10分钟的&ldquo;闹铃&rdquo;，然后让CPU去看电视（有点难度，具体实现不在我们关心的范围之内，留给读者自行解决吧：&gt;）。等闹钟响的时候再去厨房关炉子。</span></div>\r\n<div style="text-indent:21.0pt;">#include &lt;sys/types.h&gt;</div>\r\n<div style="text-indent:21.0pt;">#include &lt;unistd.h&gt;</div>\r\n<div style="text-indent:21.0pt;">#include &lt;sys/stat.h&gt;</div>\r\n<div style="text-indent:21.0pt;">#include &lt;signal.h&gt;</div>\r\n<div style="text-indent:21.0pt;">#include &lt;stdio.h&gt;</div>\r\n<div style="text-indent:21.0pt;">&nbsp;</div>\r\n<div style="text-indent:21.0pt;"><span style="font-family: 宋体; ">//&nbsp;</span><span style="font-family: 宋体; ">闹钟到时会执行此程序</span></div>\r\n<div style="text-indent:21.0pt;">void&nbsp;sig_alarm(int&nbsp;signo)</div>\r\n<div style="text-indent:21.0pt;">{</div>\r\n<div style="text-indent:21.0pt;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="font-family: 宋体; ">&nbsp;&nbsp;//</span><span style="font-family: 宋体; ">关煤气炉</span></div>\r\n<div style="text-indent:21.0pt;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(&ldquo;Close gas oven.\\n&rdquo;);</div>\r\n<div style="text-indent:21.0pt;">}&nbsp;</div>\r\n<div style="text-indent:21.0pt;">void&nbsp;watching_tv()</div>\r\n<div style="text-indent:21.0pt;">{</div>\r\n<div style="text-indent:21.0pt;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(1)</div>\r\n<div style="text-indent:21.0pt;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</div>\r\n<div style="text-indent:21.0pt;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="font-family: 宋体; ">&nbsp;&nbsp;//&nbsp;</span><span style="font-family: 宋体; ">呵呵，悠哉悠哉</span></div>\r\n<div style="margin-left:21.0pt;text-indent:21.0pt;">}</div>\r\n<div style="text-indent:21.0pt;">}</div>\r\n<div style="text-indent:21.0pt;">&nbsp;</div>\r\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;main()</div>\r\n<div style="text-indent:21.0pt;">{</div>\r\n<div style="text-indent:31.5pt;"><span style="font-family: 宋体; ">//&nbsp;</span><span style="font-family: 宋体; ">点火后设置定时中断</span></div>\r\n<div style="text-indent:21.0pt;">&nbsp;&nbsp;printf(&ldquo;Start to boil water, set Alarm&rdquo;);</div>\r\n<div style="margin-left:10.5pt;text-indent:21.0pt;">if&nbsp;(signal( SIGALRM,&nbsp;sig_alrm&nbsp;) == SIG_ERR)</div>\r\n<div style="text-indent:31.5pt;">{</div>\r\n<div style="text-indent:21.0pt;">&nbsp;&nbsp;&nbsp;&nbsp;perror(&quot;signal(SIGALRM) error&quot;);</div>\r\n<div style="text-indent:21.0pt;">&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;-1;</div>\r\n<div style="text-indent:21.0pt;">&nbsp;&nbsp;}</div>\r\n<div style="text-indent:21.0pt;">&nbsp;</div>\r\n<div style="margin-left:21.0pt;text-indent:10.5pt;"><span style="font-family: 宋体; ">//&nbsp;</span><span style="font-family: 宋体; ">然后就可以欣赏电视节目了</span></div>\r\n<div style="text-indent:21.0pt;">&nbsp;&nbsp;printf(&ldquo;Watching TV!\\n&rdquo;);</div>\r\n<div style="text-indent:31.5pt;">&nbsp;</div>\r\n<div style="text-indent:31.5pt;">watching_tv();</div>\r\n<div style="text-indent:31.5pt;">&nbsp;</div>\r\n<div style="text-indent:31.5pt;">return&nbsp;0;</div>\r\n<div style="text-indent:27.0pt;\r\nline-height:125%;layout-grid-mode:char;"><span style="font-size: 12pt; line-height: 125%; font-family: ''Times New Roman'', serif; ">}</span></div>\r\n<div style="text-indent:27.0pt;\r\nline-height:125%;layout-grid-mode:char;"><span style="font-size: 12pt; line-height: 125%; ">其实，计算机系统引入中断的原因不仅仅是为了适应</span><span style="font-size: 12pt; line-height: 125%; font-family: ''Times New Roman'', serif; ">I/O</span><span style="font-size: 12pt; line-height: 125%; ">设备工作效率低的问题。例如，当计算机正在运行中，若出现突然掉电的情况，将会导致</span><span style="font-size: 12pt; line-height: 125%; font-family: ''Times New Roman'', serif; ">CPU</span><span style="font-size: 12pt; line-height: 125%; ">中的全部信息丢失。倘若能在突然掉电的瞬间启动另一个备份电源，并迅速进行一些必要的处理，例如，将有用的信息送至不受电源影响的存储系统中，待电源恢复后接着使用，这种处理技术也要用终端技术来实现。又如，在实时控制领域中，要求</span><span style="font-size: 12pt; line-height: 125%; font-family: ''Times New Roman'', serif; ">CPU</span><span style="font-size: 12pt; line-height: 125%; ">能及时响应外来信号的请求，并能完成相应的操作，也都需要终端技术实现。</span></div>\r\n<div style="text-indent:27.0pt;\r\nline-height:125%;layout-grid-mode:char;"><span style="font-size: 12pt; line-height: 125%; ">总之有了中断系统计算机的整体效率有了提升，能够应对突发事件实现实时控制</span></div>\r\n<div style="text-indent:27.0pt;\r\nline-height:125%;layout-grid-mode:char;">&nbsp;</div>\r\n<div><b><font size="5"><a name="_Toc337808159">1.4 中断技术差生的缺点</a></font></b></div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div style="text-indent:27.0pt;\r\nline-height:125%;layout-grid-mode:char;"><span style="font-size: 12pt; line-height: 125%; background-color: white; background-position: initial initial; background-repeat: initial initial; ">举了上面的例子你也许就对中断有了一定的了解。同时在上面的例子中当有电话响了时候，你必须停下正在看的书去接电话，那么你就要记下现在看到哪里了。要不你回来的时候就不知道从哪开始看了。这也就出现了一个问题你怎么记住你现在看到的位置呢？当然你说可以凭借记忆，但是CPU是没有记忆功能的，一当有新的数据进来前面的数据就会被覆盖，那么前面的程序执行到哪了你就不知道了。</span></div>\r\n<div style="text-indent:27.0pt;\r\nline-height:125%;layout-grid-mode:char;">&nbsp;</div>\r\n<div style="text-indent:27.0pt;\r\nline-height:125%;layout-grid-mode:char;"><span style="font-size: 12pt; line-height: 125%; background-color: white; background-position: initial initial; background-repeat: initial initial; ">由此可见中断系统是一个复杂的系统。为了实现中断系统激素啊你系统必须有相应的终端系统或终端机构。这样就造成了计算机系统的复杂性。同时不同公司之间的中断系统有着不同的差别这就要求硬件也相应的不同。所以还要有统一的中断标准。</span></div>\r\n<div style="text-indent:27.0pt;\r\nline-height:125%;layout-grid-mode:char;">&nbsp;</div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;"><b>&nbsp;</b></div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;"><b>&nbsp;</b></div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;"><b>&nbsp;</b></div>\r\n<div><b><font size="6"><a name="_Toc337808160">二：基本概念</a></font></b></div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;"><b>&nbsp;</b></div>\r\n<div><b><font size="5"><a name="_Toc337808161">2.1 中断源</a></font></b></div>\r\n<div><b><font size="5"><a name="_Toc337808162"><span style="background:white">我们把引起中断的原因，或者能够发出中断请求信号的来源统称为中断源。在上面看书的例子中，打断你看书的时间就是中断源（电话响了）。</span></a></font></b></div>\r\n<div><span style="font-family: ''Adobe 楷体 Std R'', serif; background-color: white; background-position: initial initial; background-repeat: initial initial; ">通常中断源有以下几种：</span></div>\r\n<div><span style="font-family: ''Adobe 楷体 Std R'', serif; background-color: white; background-position: initial initial; background-repeat: initial initial; ">　　（１）</span><span style="font-family:&quot;Adobe 楷体 Std R&quot;,&quot;serif&quot;;\r\nbackground:white">外部设备请求中断。一般的外部设备（如键盘、打印机和A / D转换器等）在完成自身的操作后，向CPU发出中断请求，要求CPU为他服务。　由计算机硬件异常或故障引起的中断，也称为内部异常中断。</span></div>\r\n<div><span style="font-family: ''Adobe 楷体 Std R'', serif; background-color: white; background-position: initial initial; background-repeat: initial initial; ">　　（２）故障强迫中断。计算机在一些关键部位都设有故障自动检测装置。如运算溢出、</span><span style="font-family:&quot;Adobe 楷体 Std R&quot;,&quot;serif&quot;;\r\nbackground:white">存储器读出出错、外部设备故障、电源掉电以及其他报警信号等，这些装置的报警信号都能使CPU中断，进行相应的中断处理。</span></div>\r\n<div><span style="font-family: ''Adobe 楷体 Std R'', serif; background-color: white; background-position: initial initial; background-repeat: initial initial; ">　　（３）实时时钟请求中断。在控制中遇到定时检测和控制，为此常采用一个外部</span><span style="font-family:&quot;Adobe 楷体 Std R&quot;,&quot;serif&quot;;\r\nbackground:white">时钟电路（可编程）控制其时间间隔。需要定时时，CPU发出命令使时钟电路开始工作，一旦到达规定时间，时钟电路发出中断请求，由CPU转去完成检测和控制工作。</span></div>\r\n<div><span style="font-family: ''Adobe 楷体 Std R'', serif; background-color: white; background-position: initial initial; background-repeat: initial initial; ">　　（4）数据通道中断。数据通道中断也称</span><span style="font-family:&quot;Adobe 楷体 Std R&quot;,&quot;serif&quot;;\r\nbackground:white">直接存储器存取（ＤＭＡ）操作中断，如磁盘、磁带机或ＣＲＴ等直接与存储器交换数据所要求的中断。</span></div>\r\n<div><span style="font-family: ''Adobe 楷体 Std R'', serif; background-color: white; background-position: initial initial; background-repeat: initial initial; ">　　（５）程序自愿中断。ＣＰＵ执行了特殊指令（自陷指令）或由硬件电路引起的中断是程序自愿中断，是指当用户</span><span style="font-family:&quot;Adobe 楷体 Std R&quot;,&quot;serif&quot;;\r\nbackground:white">调试程序时，程序自愿中断检查中间结果或寻找错误所在而采用的检查手段，如断点中断和单步中断等。</span></div>\r\n<div><b><font size="5"><a name="_Toc337808163">2.2 中断嵌套</a></font></b></div>\r\n<div>&nbsp;</div>\r\n<div><img width="549" height="300" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image014.jpg" v:shapes="_x0000_i1028" alt="" /></div>\r\n<div style="text-indent:21.0pt"><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">中断嵌套指</span><span style="font-family:宋体;background:white">中断系统正在执行一个中断服务时，有另一个优先级更高的中断提出中断请求，这时会暂时终止当前正在执行的级别较低的中断源的服务程序，去处理级别更高的中断源，待处理完毕，再返回到被中断了中断服务程序继续执行，这个过程就是中断嵌套。</span></div>\r\n<div style="text-indent:21.0pt">&nbsp;</div>\r\n<div style="text-indent:21.0pt"><span style="font-family: ''Adobe 楷体 Std R'', serif; background-color: white; background-position: initial initial; background-repeat: initial initial; ">关于中断嵌套。可以这样说，当一个中断正在执行的时候，如果事先设置了中断优先级寄存器IP，那么当一个更高优先级的中断到来的时候会发生中断嵌套，如果没有设置则不会发生任何嵌套；如果有同一个优先级的中断触发，它并不是在&ldquo;不断的申请&rdquo;，而是将它相应的中断标志位置即IE寄存器的某位置位，当CPU执行完当前中断之后，按照查询优先级重新去查询各个中断标志位，进入相应中断。</span></div>\r\n<div><b><font size="5"><a name="_Toc337808164">2.3 中断级联</a></font></b></div>\r\n<div style="text-indent:21.0pt;line-height:125%;layout-grid-mode:\r\nchar;"><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">一个外部</span><span style="font-family:宋体;background:white">中断请求信号通过中断请求线IRQ，传输到IMR（中断屏蔽寄存器），IMR根据所设定的中断屏蔽字（OCW1），决定是将其丢弃还是接受。如果可以接受，则8259A将IRR（中断请求暂存寄存器）中代表此IRQ的位置位，以表示此IRQ有中断请求信号，并同时向CPU的INTR（中断请求）管脚发送一个信号。但CPU这时可能正在执行一条指令，因此CPU不会立即响应。而当这CPU正忙着执行某条指令时，还有可能有其余的IRQ线送来中断请求，这些请求都会接受IMR的挑选。如果没有被屏蔽，那么这些请求也会被放到IRR中，也即IRR中代表它们的IRQ的相应位会被置1。</span></div>\r\n<div style="text-indent:21.0pt;line-height:125%;layout-grid-mode:\r\nchar;"><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">当CPU执行完一条指令时后，会检查一下INTR管脚是否有信号。如果发现有信号，就会转到中断服务，此时，CPU会立即向8259A芯片的INTA（中断应答）管脚发送一个信号。当芯片收到此信号后，判优部件开始工作，它在IRR中，挑选优先级最高的中断，将中断请求送到ISR（中断服务寄存器），也即将ISR中代表此IRQ的位置位，并将IRR中相应位置零，表明此中断正在接受CPU的处理。同时，将它的编号写入</span><span style="font-family:宋体;background:white">中断向量寄存器IVR的低三位（IVR正是由ICW2所指定的，不知你是否还记得ICW2的最低三位在指定时都是0，而在这里，它们被利用了！）这时，CPU还会送来第二个INTA信号，当收到此信号后，芯片将IVR中的内容，也就是此中断的中断号送上通向CPU的数据线。</span></div>\r\n<div style="text-indent:21.0pt;line-height:125%;layout-grid-mode:\r\nchar;"><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; "><img width="567" height="291" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image016.jpg" v:shapes="_x0000_i1029" alt="" /></span></div>\r\n<div><b><font size="5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="font-family:宋体">&nbsp;&nbsp;</span><a name="_Toc337808165"><span style="font-family:宋体">图2.3</span></a></font></b></div>\r\n<div><b><font size="5">&nbsp;</font></b></div>\r\n<div><b><font size="5"><a name="_Toc337808166">2.4 软中断，硬中断</a></font></b></div>\r\n<div align="left" style="line-height: 17pt; background-color: white; background-position: initial initial; background-repeat: initial initial; "><b><span style="font-family:宋体;color:red;">软中断:</span></b><b><span style="font-family:宋体;color:#333333;"><br />\r\n</span></b><span style="font-family:宋体;\r\ncolor:#333333;">1.&nbsp; </span><span style="font-family:\r\n宋体;color:#333333;">编程异常通常叫做软中断<br />\r\n2.&nbsp; 软中断是通讯进程之间用来模拟硬中断的 一种信号通讯方式。<br />\r\n3.&nbsp; 中断源发中断请求或软中断信号后,CPU或接收进程在适当的时机自动进行中断处理或完成软中断信号对应的功能<br />\r\n4.&nbsp; 软中断是软件实现的中断,也就是程序运行时其他程序对它的中断;而硬中断是硬件实现的中断,是程序运行时设备对它的中断。<br />\r\n&nbsp;<br />\r\n</span><b><span style="font-family:宋体;\r\ncolor:red;">硬中断:</span></b><span style="font-family:宋体;color:#333333;"><br />\r\n1.&nbsp; </span><span style="font-family:宋体;\r\ncolor:#333333;">硬中断是由外部事件引起的因此具有随机性和突发性；软中断是执行中断指令产生的，无面外部施加中断请求信号，因此中断的发生不是随机的而是由程序安排好的。<br />\r\n2.&nbsp; 硬中断的中断响应周期，CPU需要发中断回合信号（NMI不需要），软中断的中断响应周期，CPU不需发中断回合信号。<br />\r\n3.&nbsp; 硬中断的中断号是由中断控制器提供的（NMI硬中断中断号系统指定为02H）；软中断的中断号由指令直接给出，无需使用中断控制器。<br />\r\n4.&nbsp; 硬中断是可屏蔽的（NMI硬中断不可屏蔽），软中断不可屏蔽。</span></div>\r\n<div align="left">&nbsp;</div>\r\n<div align="left" style="line-height: 17pt; background-color: white; background-position: initial initial; background-repeat: initial initial; "><b><span style="font-family:宋体;color:red;">区别:</span></b><span style="font-family:宋体;color:#333333;"><br />\r\n1.&nbsp; </span><span style="font-family:宋体;\r\ncolor:#333333;">软中断发生的时间是由程序控制的,而硬中断发生的时间是随机的<br />\r\n2.&nbsp; 软中断是由程序调用发生的,而硬中断是由外设引发的<br />\r\n3.&nbsp; 硬件中断处理程序要确保它能快速地完成它的任务,这样程序执行时才不会等待较长时间</span></div>\r\n<div><b><font size="5"><a name="_Toc337808167">2.5 NMI（不可屏蔽中断）&amp; 可屏蔽中断</a></font></b></div>\r\n<div style="text-indent:21.0pt"><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">非屏蔽中断是出现在<b><i>NMI</i></b>线上的请求 ，不受标志位IF的影响，在当前指令执行完以后，CPU就响应。这种中断通常用于电源故障。非屏蔽中断的优先权高于屏蔽中断。</span></div>\r\n<div style="text-indent:21.0pt"><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">　可屏蔽中断I/O设备发出的所有中断(IRQ)都可以产生可屏蔽中断，受标志位IF的影响，根据中断循序标志的设置来判断CPU是否响应中断请求。</span></div>\r\n<div style="text-indent:21.0pt">&nbsp;</div>\r\n<div style="text-indent:21.0pt">&nbsp;</div>\r\n<div><b><font size="5"><a name="_Toc337808168">2.6 中断请求号 &amp; 中断向量</a></font></b></div>\r\n<div style="text-indent:21.0pt"><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">中断请求号就是中断编号。</span></div>\r\n<div style="text-indent:21.0pt"><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">中断向量</span><span style="font-family:宋体;background:white">中断服务程序的入口地址。在某些计算机中，中断向量的位置存放一条跳转到中断服务程序入口地址的跳转指令。</span></div>\r\n<div><b><font size="5"><a name="_Toc337808169">2.7 中断响应INTA &amp; 中断周期</a></font></b></div>\r\n<div style="text-indent:21.0pt"><b><font size="5"><a name="_Toc337808170"><span style="font-size: 12pt; font-family: 宋体; ">中断响应INTA:当8259A接收到第一个/INTA有效的负脉冲后，将被响应的中断源置入ISR（正在服务寄存器）的对应位，即ISR对应位置1，同时把IRR（中断请求寄存器）的对应位清0；</span></a></font></b></div>\r\n<div align="left" style="margin-bottom: 6.8pt; line-height: 14.95pt; background-color: rgb(255, 252, 246); background-position: initial initial; background-repeat: initial initial; "><span style="font-family: 宋体; ">当8259A接收到第二个/INTA有效的负脉冲后，就将其中断类型号送入数据总线。</span></div>\r\n<div align="left" style="margin-bottom: 6.8pt; line-height: 14.95pt; background-color: rgb(255, 252, 246); background-position: initial initial; background-repeat: initial initial; ">&nbsp;</div>\r\n<div align="left" style="margin-bottom: 6.8pt; line-height: 14.95pt; background-color: rgb(255, 252, 246); background-position: initial initial; background-repeat: initial initial; "><span style="font-family: 宋体; ">中短周期：当CPU采用中断方式实现I/O交换信息时，CPU在每条指令执行结束之后检查是否又中断请求，如果有就执行中断响应，又称中短周期。</span></div>\r\n<div><b><font size="5"><a name="_Toc337808171">2.8 单步中断 &amp; IF中断允许标志位</a></font></b></div>\r\n<div><span style="font-family: 宋体; ">单步中断：执行一条指令中断一次。</span></div>\r\n<divre style="margin-bottom:6.25pt;line-height:13.75pt;background:#FFFCF6">IF中断允许标志位：标识寄存器中的一位，可以屏蔽 可屏蔽中断请求INTR\r\n<pre style="margin-bottom: 6.25pt; line-height: 13.75pt; background-position: initial initial; background-repeat: initial initial; ">\r\n如果外设有可屏蔽中断请求INTR，而此时CPU内IF=0，那么CPU不会响应中断</pre>\r\n<pre style="margin-bottom: 6.25pt; line-height: 13.75pt; background-position: initial initial; background-repeat: initial initial; ">\r\n&nbsp;</pre>\r\n<pre style="margin-bottom: 6.25pt; line-height: 13.75pt; background-position: initial initial; background-repeat: initial initial; ">\r\n只有可屏蔽中断请求INTR和IF有关系，</pre>\r\n<pre style="margin-bottom: 6.25pt; line-height: 13.75pt; background-position: initial initial; background-repeat: initial initial; ">\r\n内中断和不可屏蔽中断NMI，都不受IF的影响</pre>\r\n<div><b><font size="5"><a name="_Toc337808172">2.9 IMR中断屏蔽字&nbsp; &amp; 中断优先级</a></font></b></div>\r\n<pre style="margin-bottom: 6.25pt; line-height: 13.75pt; background-position: initial initial; background-repeat: initial initial; ">\r\nIMR中断屏蔽字：以实现对各中断的屏蔽。</pre>\r\n<pre style="margin-bottom: 6.25pt; line-height: 13.75pt; background-position: initial initial; background-repeat: initial initial; ">\r\n中断优先级：<span style="background:white">为使系统能及时响应并处理发生的所有中断，系统根据引起中断事件的重要性和紧迫程度，硬件将</span><span style="background:white">中断源分为若干个级别，称作中断优先级。</span></pre>\r\n<div><b><font size="5"><a name="_Toc337808173">2.10&nbsp;&nbsp; 中断控制器 &amp; APIC</a> </font></b></div>\r\n<p><span style="font-family:宋体;Times New Roman&quot;;Times New Roman&quot;">中断控制器：</span><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">中断控制器的功能就是在多个中断源的系统中，接收外部的中断请求，并进行判断，选中当前优先级最高的中断请求，再将此请求送到CPU的INTR端;当CPU响应中断并进入中断子程序的处理过程后，中断控制器仍负责外部的中断请求的管理。比如当某个外部中断的请求的优先级高于当前正在处理的中断优先级时，中断控制器会让此中断通过而到达CPU的INTR端，从而实现中断的嵌套，反之，对其它的级别较底的中断则给予禁止。</span></p>\r\n</divre>\r\n</span></div>\r\n<div>&nbsp;</div>\r\n<div><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">APIC:</span><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">高级可编程中断控制器</span></div>\r\n<div><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">APIC </span><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">是装置的扩充组合用来</span><span style="font-family:宋体;background:white">驱动&nbsp;Interrupt 控制器。在目前的建置中，系统的每一个部份都是经由 APIC Bus 连接的。&quot;本机 APIC&quot; 为系统的一部份，负责传递 Interrupt 至指定的处理器；举例来说，当一台机器上有三个处理器则它必须相对的要有三个本机 APIC。自 1994 年的 Pentium P54c 开始Intel 已经将本机 APIC 建置在它们的处理器中。实际建置了 Intel 处理器的电脑就已经包含了 APIC 系统的部份。</span></div>\r\n<div>&nbsp;</div>\r\n<div><b><font size="5"><a name="_Toc337808174">2.11&nbsp; 中断共享 &amp; 中断冲突</a></font></b></div>\r\n<divre style="margin-bottom:6.8pt;line-height:14.95pt;\r\nbackground:#FFFCF6">&nbsp;&nbsp;&nbsp;&nbsp; 中断共享就是某些端口公用一个中断请求，以前主板有很多PCI,第一和第五个常常共享，但只能使用其中一个，都是用会造成硬件冲突\r\n<pre style="margin-bottom: 6.8pt; line-height: 14.95pt; background-position: initial initial; background-repeat: initial initial; ">\r\n&nbsp;&nbsp;&nbsp;&nbsp; 中断冲突终端之间共用资源发生冲突。</pre>\r\n<div><b><font size="5"><a name="_Toc337808175">2.12&nbsp; MSI-X中断（PCIe）、中断处理子程序</a></font></b></div>\r\n<p style="margin-top:1.35pt"><span style="\r\ncolor:#222222">MSI-X </span><span style="color:#222222">中断是 MSI 中断的增强版本，与 MSI 中断有相同功能，具有以下关键区别：</span></p>\r\n</divre>\r\n</div>\r\n<div style="margin-left:17.7pt"><span style="color:#222222">每个设备最多支持 2048 个 MSI-X 中断向量。</span></div>\r\n<div style="margin-left:17.7pt"><span style="\r\ncolor:#222222">每个中断向量的地址和数据项都是唯一的。</span></div>\r\n<div style="margin-left:17.7pt"><span style="color:#222222">MSI-X </span><span style="\r\ncolor:#222222">支持按函数屏蔽和按向量屏蔽。</span></div>\r\n<div style="margin-left:17.7pt"><span style="\r\ncolor:#222222">中断处理子程序：处理中断请求的程序</span></div>\r\n<div><b><font size="5"><a name="_Toc337808176">2.13&nbsp; 0号中断、1号中断</a></font></b></div>\r\n<div style="margin-left:17.7pt"><span style="color:#222222">0</span><span style="\r\ncolor:#222222">号中断：</span><span style="background-color: white; background-position: initial initial; background-repeat: initial initial; ">号中断处理程序用于处理除法运算溢出，称为&quot;除数为0中断&quot;。当CPU检测到除法运算溢出，自动调用0号中断处理程序，无&quot;INT 0&quot;指令。</span></div>\r\n<div style="margin-left:17.7pt"><span style="background-color: white; background-position: initial initial; background-repeat: initial initial; ">1</span><span style="background-color: white; background-position: initial initial; background-repeat: initial initial; ">号中断：当CPU的TF标志置1时，CPU每执行一条指令，就调用1号中断处理程序，因此，它称为&quot;单步中断&quot;。 当CPU检测到TF=1时，自动进入单步方式，无&quot;INT 1&quot;指令。 该中断处理程序用于调试程序。&nbsp;</span></div>\r\n<div style="margin-left:17.7pt">&nbsp;</div>\r\n<div><b><font size="5"><a name="_Toc337808177">2.14&nbsp; 中断描述符、中断描述符表</a></font></b></div>\r\n<div><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">中断描述符：描述中断的一组数据，包括中断号等。</span></div>\r\n<div><span style="font-family:宋体;Times New Roman&quot;;Times New Roman&quot;">中断描述表：</span><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">将每个异常或</span><span style="font-family:宋体;background:white">中断向量分别与它们的处理过程联系起来。与GDT和LDT表类似，IDT也是由8字节长描述符组成的一个数组。</span></div>\r\n<div>&nbsp;</div>\r\n<div><b><font size="5"><a name="_Toc337808178">2.15&nbsp; 异常</a></font></b></div>\r\n<div style="line-height:17.65pt;background:white"><span style="color:#333333">中断通常分为同步中断和异步中断。</span></div>\r\n<div style="line-height:17.65pt;background:white"><span style="color:#333333">同步中断：当指令执行时由</span>CPU<span style="color:#333333">控制单元产生的，称为同步，是因为只有当一条指令终止执行后</span>CPU<span style="color:#333333">才会发出中断。</span></div>\r\n<div style="line-height:17.65pt;background:white"><span style="color:#333333">异步中断：由其他硬件设备依照</span>CPU<span style="color:#333333">时钟信号随机产生的。</span></div>\r\n<div><b>&nbsp;</b></div>\r\n<div><b><font size="5"><a name="_Toc337808179">2.16&nbsp; 中断门、OS的事件、消息</a></font></b></div>\r\n<div style="text-indent:21.0pt"><span style="font-family:宋体;color:#333333;background:white">通过中断门的转移和通过陷阱门的转移之间的差别只是对IF标志的处理。对于中断门，在转移过程中把IF置为0，使得在处理程序执行期间屏蔽掉INTR中断(当然，在中断处理程序中可以人为设置IF标志打开中断，以使得在处理程序执行期间允许响应可屏蔽中断)；对于陷阱门，在转移过程中保持IF位不变，即如果IF位原来是1，那么通过陷阱门转移到处理程序之后仍允许INTR中断。因此，中断门最适宜于处理中断，而陷阱门适宜于处理异常。OS的事件就是操作系统事件。</span></div>\r\n<div style="text-indent:21.0pt"><span style="font-family:宋体;color:#333333;background:white">消息：</span><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">消息，</span><span style="font-family:宋体;background:white">软件对象之间进行交互作用和通讯是利用消息的</span></div>\r\n<div style="text-indent:21.0pt">&nbsp;</div>\r\n<div><b><font size="6"><a name="_Toc337808180">三：中断资源相关</a></font></b></div>\r\n<div align="center" style="text-align:center"><b>&nbsp;</b></div>\r\n<div><b><font size="5"><a name="_Toc337808181">3.1&nbsp; 我的电脑中断相关资源占用情况</a></font></b></div>\r\n<div><img width="566" height="670" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image017.jpg" v:shapes="_x0000_i1030" alt="" /></div>\r\n<div style="text-indent:21.0pt"><span style="font-family:宋体"><img width="482" height="715" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image018.jpg" v:shapes="_x0000_i1031" alt="" /></span></div>\r\n<div style="text-indent:21.0pt"><span style="font-family:宋体"><img width="472" height="865" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image020.jpg" v:shapes="_x0000_i1032" alt="" /></span></div>\r\n<div style="text-indent:21.0pt"><span style="font-family:宋体"><img width="566" height="303" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image022.jpg" v:shapes="_x0000_i1033" alt="" /></span></div>\r\n<div style="text-indent:21.0pt">&nbsp;</div>\r\n<div style="text-indent:21.0pt">&nbsp;</div>\r\n<div><b><font size="5"><a name="_Toc337808182">3.2 ISA中断</a></font></b></div>\r\n<div><img width="566" height="670" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image017.jpg" v:shapes="_x0000_i1034" alt="" /></div>\r\n<div>&nbsp;</div>\r\n<div style="text-indent:21.0pt"><span style="font-family:宋体"><img width="482" height="715" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image018.jpg" v:shapes="_x0000_i1035" alt="" /></span></div>\r\n<div style="text-indent:21.0pt"><span style="font-family:宋体"><img width="472" height="865" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image020.jpg" v:shapes="_x0000_i1036" alt="" /></span></div>\r\n<div style="text-indent:21.0pt"><span style="font-family:宋体"><img width="566" height="91" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image024.jpg" v:shapes="_x0000_i1037" alt="" /></span></div>\r\n<div style="text-indent:21.0pt">&nbsp;</div>\r\n<div style="text-indent:21.0pt">&nbsp;</div>\r\n<div><b><font size="5"><a name="_Toc337808183">3.3 PCI中断</a></font></b></div>\r\n<div style="text-indent:21.0pt">&nbsp;</div>\r\n<div style="text-indent:21.0pt"><span style="font-family:宋体"><img width="567" height="209" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image026.jpg" v:shapes="_x0000_i1038" alt="" /></span></div>\r\n<div style="text-indent:21.0pt">&nbsp;</div>\r\n<div><b><font size="5"><a name="_Toc337808184">3.4 IRQ 0-15中断请求外的</a></font></b></div>\r\n<div style="text-indent:21.0pt"><span style="font-family:宋体">其他是microsoft acpi-compliant system的。</span><span style="font-family: 宋体; ">微软ACPI-Compliant系统</span><span style="font-family:宋体">，</span><span style="font-family: 宋体; ">全名Advanced Configuration and Power Management Interface</span></div>\r\n<div><span style="font-family: 宋体; ">ACPI</span><span style="font-family: 宋体; ">表示高级配置和电源管理接口（Advanced Configuration and Power Management Interface）。对于Windows2000，ACPI定义了Windows 2000、BIOS和系统硬件之间的新型工作接口。这些新接口包括允许Windows 2000控制电源管理和设备配置的机制。 ACPI意图是让系统而不是BIOS来全面控制电源管理，使系统更加省电。 其特点主要有：提供立刻开机功能，即开机后可立即恢复到上次关机时的状态，光驱、软驱和硬盘在未使用时会自动关掉电源，使用时再打开；支持在开电状态下既插即拔，随时更换功能。</span></div>\r\n<div>&nbsp;</div>\r\n<div><b><font size="6"><a name="_Toc337808185">四：中断系统</a></font></b></div>\r\n<div align="center" style="text-align:center"><b>&nbsp;</b></div>\r\n<div align="center" style="text-align:center"><b>&nbsp;</b></div>\r\n<div><b><font size="5"><a name="_Toc337808186">4.1 中断系统怎样协调完成中断过程</a></font></b></div>\r\n<p>\r\n<divre style="margin-bottom:6.25pt;line-height:13.75pt;background:#FFFCF6">中断过程：中断请求，中断判优，中断响应，中断处理，中断返回\r\n<pre style="margin-bottom: 6.25pt; line-height: 13.75pt; background-position: initial initial; background-repeat: initial initial; "><img width="566" height="529" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image028.jpg" v:shapes="_x0000_i1039" alt="" /></pre>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="font-family:宋体;Times New Roman&quot;;Times New Roman&quot;">图</span>4.1<span style="font-family:\r\n宋体;Times New Roman&quot;;Times New Roman&quot;">中断过程</span></p>\r\n<div style="text-indent:21.0pt;"><span style="font-family: 宋体; ">CPU</span><span style="font-family: 宋体; ">执行完一条指令后，下一条指令的逻辑地址存放在cs和eip这对寄存器中。在执行新指令前，控制单元会检查在执行前一条指令的过程中是否有中断或异常发生。如果有，控制单元就会抛下指令，进入下面的流程：</span></div>\r\n<div style="margin-left:39.0pt;text-indent:-18.0pt;"><span style="font-family: 宋体; ">1.</span><span style="font-family: 宋体; ">确定与中断或异常关联的向量i&nbsp;(0--255)</span></div>\r\n<div style="margin-left:39.0pt;text-indent:-18.0pt;"><span style="font-family: 宋体; ">2.</span><span style="font-family: 宋体; ">寻找向量对应的处理程序</span></div>\r\n<div style="margin-left:39.0pt;text-indent:-18.0pt;"><span style="font-family: 宋体; ">3.</span><span style="font-family: 宋体; ">保存当前的&ldquo;工作现场&rdquo;，执行中断或异常的处理程序</span></div>\r\n<div style="margin-left:39.0pt;text-indent:-18.0pt;"><span style="font-family: 宋体; ">4.</span><span style="font-family: 宋体; ">处理程序执行完毕后，把控制权交还给控制单元</span></div>\r\n<div style="margin-left:39.0pt;text-indent:-18.0pt;"><span style="font-family: 宋体; ">5.</span><span style="font-family: 宋体; ">控制单元恢复现场，返回继续执行原程序</span></div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div><span style="position:\r\nrelative;z-index:251663360;left:-64px;top:58px;width:553px;height:298px"><img width="553" height="240" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image030.gif" v:shapes="_x0000_s1037" alt="" /></span>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<br clear="ALL" />\r\n<div><b><span style="font-size:18.0pt;font-family:宋体">中断控制器执行下列动作：</span></b></div>\r\n<div><span style="font-family:宋体">1</span><span style="font-family:宋体">，监视IRQ线，对引发信号检查</span></div>\r\n<div><span style="font-family:宋体">2</span><span style="font-family:宋体">，如果一个引发信号出现在IRQ线上</span></div>\r\n<div><span style="font-family:宋体">a</span><span style="font-family:宋体">，把此信号转换成对应的中断向量</span></div>\r\n<div><span style="font-family:宋体">b</span><span style="font-family:宋体">，把这个向量存放在中断控制器的一个I/O端口，从而允许CPU通过数据总线读这个向量</span></div>\r\n<div><span style="font-family:宋体">c</span><span style="font-family:宋体">，把引发信号发送到处理器的INTR引脚，即产生一个中断</span></div>\r\n<div><span style="font-family:宋体">d</span><span style="font-family:宋体">，等待，直到CPU应答这个信号；收到应答后，清INTR引脚</span></div>\r\n<div><span style="font-family:宋体">3</span><span style="font-family:宋体">，返回到第一步</span></div>\r\n<div>&nbsp;</div>\r\n<div><span style="font-size:14.0pt;font-family:宋体">Windows 2000</span><span style="font-size:14.0pt;font-family:宋体">在系统启动时填写IDT表</span></div>\r\n<div>&nbsp;</div>\r\n<div><span style="font-size:14.0pt;font-family:宋体">当中断发生时，处理器将会根据IDT将控制转移给适当的中断/异常处理</span></div>\r\n<div><b><font size="6"><a name="_Toc337808187">五：多处理器系统的中断</a></font></b></div>\r\n<div align="center" style="text-align:center"><b>&nbsp;</b></div>\r\n<div><b><font size="5"><a name="_Toc337808188">5.1 怎么连接</a></font></b></div>\r\n<div><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">对于多核CPU，优化</span><span style="font-family:宋体;background:white">操作系统任务调度算法是保证效率的关键。一般任务调度算法有全局队列调度和局部队列调度。前者是指操作系统维护一个全局的任务等待队列，当系统中有一个CPU核心空闲时，操作系统就从全局任务等待队列中选取就绪任务开始在此核心上执行。</span></div>\r\n<div><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">　　这种方法的优点是CPU核心利用率较高。后者是指操作系统为每个CPU</span><span style="font-family:宋体"><a href="http://baike.baidu.com/view/1366.htm" target="_blank"><span style="color:#136EC2;background:white">内核</span></a></span><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">维护一个局部的任务等待队列，当系统中有一个CPU内核空闲时，便从该核心的任务等待队列中选取恰当的任务执行，这种方法的优点是任务基本上无需在多个CPU核心间切换，有利于提高CPU核心局部Cache命中率。目前多数多核CPU操作系统采用的是基于全局队列的任务调度算法。</span></div>\r\n<div style="text-indent:23.25pt"><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">多核的中断处理和单核有很大不同。多核的各处理器之间需要通过</span><span style="font-family:宋体;background:white">中断方式进行通信，所以多个处理器之间的本地中断控制器和负责仲裁各核之间中断分配的全局中断控制器也需要封装在芯片内部。</span></div>\r\n<d', 31, 0);

-- --------------------------------------------------------

--
-- 表的结构 `lib_borrow`
--

CREATE TABLE IF NOT EXISTS `lib_borrow` (
  `id` int(20) unsigned NOT NULL AUTO_INCREMENT,
  `bookID` int(10) DEFAULT NULL,
  `reader` int(11) NOT NULL,
  `borrowtime` date NOT NULL,
  `returntime` date DEFAULT NULL,
  `isreturn` tinyint(1) NOT NULL DEFAULT '0',
  `isdely` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COMMENT='图书借阅表' AUTO_INCREMENT=11 ;

--
-- 转存表中的数据 `lib_borrow`
--

INSERT INTO `lib_borrow` (`id`, `bookID`, `reader`, `borrowtime`, `returntime`, `isreturn`, `isdely`) VALUES
(1, 32, 7, '2012-10-12', NULL, 1, 0),
(2, 32, 7, '2012-10-12', NULL, 1, 0),
(3, 1, 43, '2012-10-15', '2012-10-15', 1, 0),
(4, 7, 46, '2012-10-15', NULL, 1, 0),
(5, 30, 7, '2012-10-15', '2012-10-16', 1, 0),
(6, 32, 53, '2012-10-17', '2012-11-01', 0, 1),
(7, 35, 60, '2012-11-16', '2012-11-16', 1, 0),
(8, 35, 60, '2012-11-16', '2012-11-16', 1, 0),
(9, 33, 60, '2012-11-16', '2012-11-16', 1, 0),
(10, 33, 60, '2012-11-16', '2013-01-15', 0, 1);

-- --------------------------------------------------------

--
-- 表的结构 `lib_giveback`
--

CREATE TABLE IF NOT EXISTS `lib_giveback` (
  `rid` int(10) NOT NULL AUTO_INCREMENT,
  `readerid` int(11) DEFAULT NULL,
  `bookid` int(11) DEFAULT NULL,
  `returntime` date DEFAULT NULL,
  `opreatorid` int(10) DEFAULT NULL,
  PRIMARY KEY (`rid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='图书归还表' AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- 表的结构 `lib_library`
--

CREATE TABLE IF NOT EXISTS `lib_library` (
  `ID` int(10) NOT NULL AUTO_INCREMENT,
  `LibraryName` varchar(50) NOT NULL,
  `LibraryCurator` varchar(10) NOT NULL,
  `Telephone` varchar(20) DEFAULT NULL,
  `Email` varchar(100) DEFAULT NULL,
  `Address` varchar(100) DEFAULT NULL,
  `Url` varchar(100) DEFAULT NULL,
  `BuildingDate` date DEFAULT NULL,
  `Intruction` text,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COMMENT='图书馆信息表' AUTO_INCREMENT=2 ;

--
-- 转存表中的数据 `lib_library`
--

INSERT INTO `lib_library` (`ID`, `LibraryName`, `LibraryCurator`, `Telephone`, `Email`, `Address`, `Url`, `BuildingDate`, `Intruction`) VALUES
(1, '和谐图书馆', '河蟹', '010-110', 'hexie@tianchao.com', '天朝和谐市八荣八耻大街和谐社区', 'http://www.hexie.tianchao.com', '2012-01-02', '<h1 style="text-align: center; ">和谐图书馆</h1>');

-- --------------------------------------------------------

--
-- 表的结构 `lib_manager`
--

CREATE TABLE IF NOT EXISTS `lib_manager` (
  `mID` int(10) NOT NULL AUTO_INCREMENT,
  `Mname` varchar(50) CHARACTER SET latin1 DEFAULT NULL,
  `Memail` varchar(200) NOT NULL,
  `Mpass` varchar(200) CHARACTER SET latin1 DEFAULT NULL,
  `role_id` tinyint(2) NOT NULL,
  `CreateDate` date NOT NULL,
  `UpdateDate` date NOT NULL,
  `LastLoginTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`mID`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COMMENT='管理员表' AUTO_INCREMENT=41 ;

--
-- 转存表中的数据 `lib_manager`
--

INSERT INTO `lib_manager` (`mID`, `Mname`, `Memail`, `Mpass`, `role_id`, `CreateDate`, `UpdateDate`, `LastLoginTime`) VALUES
(27, 'admin', 'admin123654@126.com', '96e79218965eb72c92a549dd5a330112', 12, '2012-10-08', '2012-10-08', '2012-11-16 01:11:06'),
(35, 'daidong', 'daidong123654@126.com', '5cdb993c8ba77c47ed92f8a3ba9ad0c9', 12, '2012-10-18', '2012-10-18', '2012-10-19 04:10:11'),
(38, 'HIT', 'HIT@HIT.COM', '96e79218965eb72c92a549dd5a330112', 12, '2012-10-19', '2012-10-21', '2012-10-21 03:31:56'),
(40, '11', '111@11.com', '96e79218965eb72c92a549dd5a330112', 21, '2012-10-28', '2012-10-28', '2012-10-27 18:10:58');

-- --------------------------------------------------------

--
-- 表的结构 `lib_message`
--

CREATE TABLE IF NOT EXISTS `lib_message` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(32) NOT NULL,
  `content` text NOT NULL,
  `reply` text NOT NULL,
  `reply_admin` varchar(32) NOT NULL,
  `reply_time` datetime NOT NULL,
  `user_ip` varchar(15) NOT NULL,
  `if_show` tinyint(1) NOT NULL DEFAULT '1',
  `AskTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=6 ;

--
-- 转存表中的数据 `lib_message`
--

INSERT INTO `lib_message` (`id`, `username`, `content`, `reply`, `reply_admin`, `reply_time`, `user_ip`, `if_show`, `AskTime`) VALUES
(1, '1', '11', '<p>zeshikdkdjflkskfsjlksdflkj</p>', 'admin', '2012-10-29 10:10:00', '', 1, '2012-10-29 08:13:22'),
(3, 'ds', 'dfs', 'sdf', 'fds', '2012-10-29 00:00:00', 'fds', 1, '2012-10-29 09:09:56'),
(4, 'daidong', 'ddddddddddddddddd', '', '', '0000-00-00 00:00:00', '::1', 1, '2012-11-16 00:11:08'),
(5, 'daidong', 'aaaaaaaaaaaaaaa', '', '', '0000-00-00 00:00:00', '::1', 1, '2012-11-16 00:11:49');

-- --------------------------------------------------------

--
-- 表的结构 `lib_news`
--

CREATE TABLE IF NOT EXISTS `lib_news` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(128) NOT NULL,
  `author` varchar(100) NOT NULL,
  `adder` varchar(100) NOT NULL,
  `text` text NOT NULL,
  `CreateDate` date NOT NULL,
  `UpdateDate` date NOT NULL,
  `isdelete` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `slug` (`author`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COMMENT='新闻表' AUTO_INCREMENT=6 ;

--
-- 转存表中的数据 `lib_news`
--

INSERT INTO `lib_news` (`id`, `title`, `author`, `adder`, `text`, `CreateDate`, `UpdateDate`, `isdelete`) VALUES
(1, '和谐图书馆管理系统', '天朝和谐社区委员会', 'admin', '<h1 style="text-align: center; ">&nbsp;</h1>\r\n<p style="text-align: center; "><span style="font-size:40.0pt;font-family:隶书;color:#00B0F0;language:zh-CN;font-weight:bold">&nbsp; &nbsp; &nbsp;天朝和谐社区之和谐社区图书</span></p>\r\n<p style="text-align: center; ">&nbsp;</p>\r\n<p style="text-align: center; "><span style="font-size:40.0pt;font-family:隶书;color:#00B0F0;language:zh-CN;font-weight:bold">馆管理系统的新</span>&nbsp;</p>\r\n<p style="text-align: center; ">&nbsp;</p>\r\n<p style="text-align: center; "><span style="font-size:40.0pt;font-family:隶书;color:#00B0F0;language:zh-CN;font-weight:bold">闻发布模块上线了！</span></p>\r\n<p style="text-align: center; "><span style="font-size:40.0pt;font-family:隶书;color:#00B0F0;language:zh-CN;font-weight:bold"><br />\r\n和谐图书馆管理系统由</span></p>\r\n<p style="text-align: center; "><span style="font-size:40.0pt;font-family:隶书;color:#00B0F0;language:zh-CN;font-weight:bold"><br />\r\n天朝和谐市和谐工业大学</span></p>\r\n<p style="text-align: center; ">&nbsp;</p>\r\n<p style="text-align: center; "><span style="font-size:40.0pt;font-family:隶书;color:#00B0F0;language:zh-CN;font-weight:bold"><br />\r\n计算机学院Pureweber小组创建。</span></p>\r\n<p style="text-align: center; ">&nbsp;</p>\r\n<p style="text-align: center; "><span style="font-size:40.0pt;font-family:隶书;color:#00B0F0;language:zh-CN;font-weight:bold"><br />\r\n欢迎访问，拍砖请留情。</span></p>\r\n<p style="text-align: center; ">&nbsp;</p>\r\n<p style="text-align: center; ">&nbsp;</p>', '2012-10-19', '2012-10-27', 0),
(2, '用户daidong添加的新闻', 'daidong', 'daidong', '<h1 style="text-align: center">这是由管理员用户daidong添加的新闻&nbsp;</h1>', '2012-10-19', '2012-10-19', 0);
INSERT INTO `lib_news` (`id`, `title`, `author`, `adder`, `text`, `CreateDate`, `UpdateDate`, `isdelete`) VALUES
(3, '图书内容实验', '图书内容实验', 'admin', '<div>\r\n<div align="right" style="text-align:right;text-indent:24.0pt;line-height:19.0pt;"><img width="46" height="113" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image001.gif" alt="文本框: 张   三" v:shapes="_x0000_s1032" v:dpi="96" />               <span style="\r\nposition:absolute;z-index:251659264;left:0px;margin-left:0px;margin-top:0px;\r\nwidth:46px;height:367px"><img width="46" height="367" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="文本框: 哈尔滨哈飞集团汽车博物馆设计" v:shapes="_x0000_s1033" v:dpi="96" /><img width="747" height="367" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image003.gif" alt="文本框: 哈尔滨哈飞集团汽车博物馆设计" v:shapes="_x0000_s1026 _x0000_s1027" />               <img width="243" height="139" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image004.gif" v:shapes="_x0000_s1028 _x0000_s1029 _x0000_s1030 _x0000_s1031" alt="" />          <img width="45" height="153" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image005.gif" alt="文本框: 本科毕业设计（论文）" v:shapes="_x0000_s1034" v:dpi="96" />                 <span style="position:absolute;left:0pt;z-index:251661312">\r\n<table cellpadding="0" cellspacing="0" width="100%">\r\n    <tbody>\r\n        <tr>\r\n            <td>\r\n            <div v:shape="_x0000_s1035" style="padding:3.6pt 7.2pt 3.6pt 7.2pt">\r\n            <p align="left"><span style="font-size:14.0pt;font-family:黑体">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size:\r\n            14.0pt;font-family:黑体">年&nbsp;&nbsp;&nbsp;&nbsp; 月</span></p>\r\n            </div>\r\n            <div align="left">&nbsp;</div>\r\n            <div align="left">&nbsp;</div>\r\n            </td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n</span>&nbsp;     &nbsp;\r\n<p>&nbsp;</p>\r\n<div style="text-indent:24.0pt;\r\nline-height:19.0pt;layout-grid-mode:char;">&nbsp;</div>\r\n<div align="center" style="margin-top:12.0pt;text-align:center;\r\ntext-indent:44.0pt;line-height:19.0pt;">&nbsp;</div>\r\n<div align="center" style="margin-top:12.0pt;text-align:center;\r\ntext-indent:44.0pt;line-height:19.0pt;">&nbsp;</div>\r\n<br clear="ALL" />\r\n<div align="center" style="text-align:center"><b><span style="font-size:22.0pt;font-family:黑体;Times New Roman&quot;">计算机中断技术大作业</span></b></div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;"><b>&nbsp;</b></div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;"><b>&nbsp;</b></div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;"><b>&nbsp;</b></div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;"><b>&nbsp;</b></div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;"><b>&nbsp;</b></div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;"><b><span style="font-size:18.0pt;line-height:125%;font-family:宋体;Times New Roman&quot;;Times New Roman&quot;">代</span></b><b>&nbsp;</b><b><span style="font-size:18.0pt;line-height:\r\n125%;font-family:宋体;Times New Roman&quot;;Times New Roman&quot;">东</span></b></div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;">&nbsp;</div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;">&nbsp;</div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;">&nbsp;</div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;">&nbsp;</div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;">&nbsp;</div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;">&nbsp;</div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;">&nbsp;</div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;">&nbsp;</div>\r\n<div style="line-height:125%;layout-grid-mode:char;">&nbsp;</div>\r\n<div style="line-height:125%;layout-grid-mode:char;">&nbsp;</div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;">&nbsp;</div>\r\n<div align="left" style="margin-right: -11.9pt; text-indent: 72pt; line-height: 125%; "><span style="font-family:黑体;Times New Roman&quot;;Times New Roman&quot;">院</span> <span style="font-family:黑体;Times New Roman&quot;;Times New Roman&quot;">（系）：计算机学院</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="font-family:黑体;Times New Roman&quot;;Times New Roman&quot;">专</span>&nbsp;&nbsp;&nbsp; <span style="font-family:\r\n黑体;Times New Roman&quot;;Times New Roman&quot;">业：计算机科学与技术类</span></div>\r\n<div align="left" style="margin-right: -11.9pt; line-height: 125%; ">&nbsp;</div>\r\n<div align="left" style="margin-right: 0.75pt; text-indent: 72pt; line-height: 125%; "><span style="font-family:黑体;Times New Roman&quot;;Times New Roman&quot;">学　　号：</span>1100300829&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="font-family:黑体;Times New Roman&quot;;Times New Roman&quot;">指导教师：史先俊</span></div>\r\n<div align="left" style="margin-right: 67pt; line-height: 125%; ">&nbsp;</div>\r\n<div align="left" style="margin-right: 67pt; line-height: 125%; ">&nbsp;</div>\r\n<div align="center" style="text-align:center;layout-grid-mode:char;"><b><span style="font-size:14.0pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;2012</b><b><span style="font-family:宋体;Times New Roman&quot;;Times New Roman&quot;">年</span>10</b><b><span style="font-family:宋体;Times New Roman&quot;;Times New Roman&quot;">月</span></b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;"><b>&nbsp;</b></div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;"><b>&nbsp;</b></div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;"><b>&nbsp;</b></div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;"><b>&nbsp;</b></div>\r\n<div align="center" style="text-align:center;line-height:125%"><a name="_Toc8970076"><span style="font-size:10.5pt;line-height:125%"><img width="329" height="60" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image007.jpg" v:shapes="_x0000_i1025" alt="" /></span></a></div>\r\n<div align="center" style="text-align:center;line-height:125%">&nbsp;</div>\r\n<div align="center" style="text-align:center;line-height:125%">&nbsp;</div>\r\n<div align="center" style="margin-right:87.9pt;text-align:center;\r\nline-height:12.0pt;"><b>&nbsp;</b></div>\r\n<div align="center" style="margin-right:.2pt;text-align:center;\r\nline-height:125%"><b><span style="font-size:42.0pt;line-height:125%;font-family:华文新魏;Times New Roman&quot;;letter-spacing:1.0pt;">大作业</span></b></div>\r\n<div align="center" style="text-align:center;line-height:125%">&nbsp;</div>\r\n<div align="center" style="text-align:center;line-height:125%">&nbsp;</div>\r\n<div align="center" style="text-align:center;line-height:125%">&nbsp;</div>\r\n<div align="center" style="text-align:center;line-height:125%">&nbsp;</div>\r\n<div style="line-height:125%">&nbsp;</div>\r\n<div style="text-indent:67.15pt;\r\nline-height:175%"><span style="font-size:18.0pt;line-height:175%;font-family:\r\n黑体;Times New Roman&quot;;Times New Roman&quot;">题</span><span style="font-size:18.0pt;line-height:175%;"> &nbsp;&nbsp;&nbsp;&nbsp;</span><span style="font-size:18.0pt;line-height:175%;font-family:黑体;Times New Roman&quot;;Times New Roman&quot;">目</span>&nbsp;<u><span style="font-size:18.0pt;line-height:175%;font-family:\r\n黑体;Times New Roman&quot;;Times New Roman&quot;">深入理解中断系统</span></u><u>&nbsp;</u></div>\r\n<div style="text-indent:67.15pt;\r\nline-height:175%"><u>&nbsp;</u></div>\r\n<div style="text-indent:67.15pt;\r\nline-height:175%"><u>&nbsp;</u></div>\r\n<div style="text-indent:52.2pt;\r\nline-height:175%">&nbsp;</div>\r\n<div style="text-indent:63.3pt;\r\nline-height:125%">&nbsp;</div>\r\n<div style="text-indent:63.3pt;\r\nline-height:125%">&nbsp;</div>\r\n<div style="text-indent:67.2pt;\r\nline-height:175%"><span style="font-size:15.0pt;line-height:175%;font-family:\r\n黑体;Times New Roman&quot;;Times New Roman&quot;">专</span><span style="font-size:15.0pt;line-height:175%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size:15.0pt;\r\nline-height:175%;font-family:黑体;Times New Roman&quot;;Times New Roman&quot;">业</span><span style="font-size:15.0pt;\r\nline-height:175%;"> <u>&nbsp;&nbsp;</u></span><u><span style="font-size:15.0pt;line-height:175%;font-family:黑体;Times New Roman&quot;;Times New Roman&quot;">计算机科学与技术</span></u><u><span style="font-size:15.0pt;line-height:175%;">&nbsp;&nbsp;&nbsp;&nbsp; </span></u></div>\r\n<div style="text-indent:67.2pt;\r\nline-height:175%;"><span style="font-size:15.0pt;line-height:175%;font-family:\r\n黑体;Times New Roman&quot;;Times New Roman&quot;">学　　</span><span style="font-size:15.0pt;line-height:175%;">&nbsp;&nbsp; </span><span style="font-size:15.0pt;\r\nline-height:175%;font-family:黑体;Times New Roman&quot;;Times New Roman&quot;">号</span><span style="font-size:15.0pt;\r\nline-height:175%;"> <u>&nbsp;&nbsp;&nbsp;1100300829&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </u></span></div>\r\n<div style="text-indent:67.2pt;\r\nline-height:175%;"><span style="font-size:15.0pt;line-height:175%;font-family:\r\n黑体;Times New Roman&quot;;Times New Roman&quot;">学</span><span style="font-size:15.0pt;line-height:175%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size:15.0pt;\r\nline-height:175%;font-family:黑体;Times New Roman&quot;;Times New Roman&quot;">生</span><span style="font-size:15.0pt;\r\nline-height:175%;"> <u>&nbsp;&nbsp;&nbsp;&nbsp;</u></span><u><span style="font-size:15.0pt;line-height:175%;font-family:黑体;Times New Roman&quot;;Times New Roman&quot;">代</span></u><u><span style="font-size:15.0pt;line-height:175%;">&nbsp;&nbsp;&nbsp;&nbsp; </span></u><u><span style="font-size:15.0pt;\r\nline-height:175%;font-family:黑体;Times New Roman&quot;;Times New Roman&quot;">东</span></u><u><span style="font-size:15.0pt;line-height:175%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></u></div>\r\n<div style="text-indent:67.2pt;\r\nline-height:175%;"><span style="font-size:15.0pt;line-height:175%;font-family:\r\n黑体;Times New Roman&quot;;Times New Roman&quot;">指</span><span style="font-size:15.0pt;line-height:175%;font-family:黑体;Times New Roman&quot;;Times New Roman&quot;">导</span><span style="font-size:15.0pt;line-height:175%;font-family:黑体;Times New Roman&quot;;Times New Roman&quot;">教</span><span style="font-size:15.0pt;line-height:175%;font-family:黑体;Times New Roman&quot;;Times New Roman&quot;">师</span><span style="font-size:15.0pt;\r\nline-height:175%;"> <u>&nbsp;&nbsp;&nbsp;&nbsp;</u></span><u><span style="font-size:15.0pt;line-height:175%;font-family:黑体;Times New Roman&quot;;Times New Roman&quot;;">史先俊</span></u><u><span style="font-size:15.0pt;line-height:175%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></u></div>\r\n<div style="text-indent:24.0pt;\r\nline-height:19.0pt;layout-grid-mode:char;"><span style="position:absolute;\r\nleft:0pt;z-index:251662336">\r\n<table cellpadding="0" cellspacing="0" width="100%">\r\n    <tbody>\r\n        <tr>\r\n            <td>\r\n            <div v:shape="_x0000_s1036" style="padding:3.6pt 7.2pt 3.6pt 7.2pt">\r\n            <p><img width="36" height="20" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image009.gif" v:shapes="_x0000_i1041" alt="" /></p>\r\n            </div>\r\n            </td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n</span>&nbsp;\r\n<p>&nbsp;</p>\r\n</div>\r\n<span style="font-size:12.0pt;font-family:&quot;Times New Roman&quot;,&quot;serif&quot;;"><br clear="all" style="page-break-before:always;" />\r\n</span>\r\n<div align="center" style="text-align:center"><a name="_Toc225579639"><span style="font-family:宋体;">目</span></a>&nbsp; <span style="font-family:宋体;">录</span></div>\r\n<div><img width="552" height="241" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image010.gif" v:shapes="_x0000_i1026" alt="" /></div>\r\n<div style="text-indent:27.0pt;\r\nline-height:125%;layout-grid-mode:char;"><span style="font-size: 12pt; line-height: 125%; background-color: white; background-position: initial initial; background-repeat: initial initial; ">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt; line-height: 125%; background-color: white; background-position: initial initial; background-repeat: initial initial; ">图1.1中断处理过程</span></div>\r\n<div style="text-indent:27.0pt;\r\nline-height:125%;layout-grid-mode:char;">&nbsp;</div>\r\n<div style="text-indent:27.0pt;\r\nline-height:125%;layout-grid-mode:char;">&nbsp;</div>\r\n<div style="text-indent:27.0pt;\r\nline-height:125%;layout-grid-mode:char;"><span style="font-size: 12pt; line-height: 125%; background-color: white; background-position: initial initial; background-repeat: initial initial; ">打一个不太恰当的比方。比如说你正在看书那么你就是CPU，看书就相当于你正在执行的程序，当你电话响了或者是有其他的事情发生导致你必须停下正在看的书去做另一件事（接电话）。那么这就是一个中断，在这个中断中现行程序是看书，中断时电话响了，CPU是你自己。当你接完电话之后（假设接完电话就没其他特殊的事了）那么你就回去看书，也就相当于定义中的返回执行原程序。</span></div>\r\n<div style="text-indent:27.0pt;\r\nline-height:125%;layout-grid-mode:char;">&nbsp;</div>\r\n<div><b><font size="5"><a name="_Toc337808157">1.2 中断技术差生的原因</a></font></b></div>\r\n<div>&nbsp;</div>\r\n<div style="text-indent:21.0pt;"><span style="font-family: 宋体; ">讲了上面的内容也许你对中断概念有了一定的了解。那么为什么会产生中断呢？</span></div>\r\n<div style="text-indent:21.0pt;"><span style="font-family: 宋体; ">为了介绍为什么会产生中断我们有必要对计算机的组成结构和工作的过程来了解一下。下图是计算机的组成结构。</span></div>\r\n<div style="text-indent:21.0pt;">&nbsp;</div>\r\n<div style="text-indent:21.0pt;"><span style="font-family: 宋体; "><img width="567" height="288" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image012.jpg" v:shapes="_x0000_i1027" alt="" /></span></div>\r\n<div style="text-indent:21.0pt;"><span style="font-family: 宋体; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-family: 宋体; ">图1.2计算机组成结构</span></div>\r\n<div style="text-indent:21.0pt;">&nbsp;</div>\r\n<div style="margin-left:21.0pt;text-indent:21.0pt;"><span style="font-family: 宋体; ">可以看到计算机石油输入输出设备控制器运算器和存储器组成的，那么计算机是如何工作的呢？</span></div>\r\n<div style="margin-left:21.0pt;text-indent:21.0pt;">&nbsp;</div>\r\n<div style="margin:0cm;margin-bottom:.0001pt;text-indent:24.0pt;line-height:19.5pt;\r\nbackground:#FEFFF8"><span style="font-family:&quot;Adobe 楷体 Std R&quot;,&quot;serif&quot;;\r\ncolor:#333333">计算机工作时，首先由键盘等输入设备。输入程序和数据，程序和数据信息，通过J/O接口电路，经数据总线送入主存贮器中，接着CPU开始运行输入的指令，并处理输入的数据。CPU要进行下列工作：</span></div>\r\n<div style="margin:0cm;margin-bottom:.0001pt;text-indent:24.0pt;line-height:19.5pt;\r\nbackground:#FEFFF8"><span style="font-family:&quot;Adobe 楷体 Std R&quot;,&quot;serif&quot;;\r\ncolor:#333333">⑴将指令的地址放到地址总线；</span></div>\r\n<div style="margin:0cm;margin-bottom:.0001pt;text-indent:24.0pt;line-height:19.5pt;\r\nbackground:#FEFFF8"><span style="font-family:&quot;Adobe 楷体 Std R&quot;,&quot;serif&quot;;\r\ncolor:#333333">⑵按着上述地址，通过数据总线在主存贮器中找到并取出指令，由指令译码器对该指令进行分析译码；</span></div>\r\n<div style="margin:0cm;margin-bottom:.0001pt;text-indent:24.0pt;line-height:19.5pt;\r\nbackground:#FEFFF8"><span style="font-family:&quot;Adobe 楷体 Std R&quot;,&quot;serif&quot;;\r\ncolor:#333333">⑶根据译码结果，取出指令所要处理的数据地址及相应的数据；</span></div>\r\n<div style="margin:0cm;margin-bottom:.0001pt;text-indent:24.0pt;line-height:19.5pt;\r\nbackground:#FEFFF8"><span style="font-family:&quot;Adobe 楷体 Std R&quot;,&quot;serif&quot;;\r\ncolor:#333333">⑷执行指令所代表的具体操作；</span></div>\r\n<div style="margin:0cm;margin-bottom:.0001pt;text-indent:24.0pt;line-height:19.5pt;\r\nbackground:#FEFFF8"><span style="font-family:&quot;Adobe 楷体 Std R&quot;,&quot;serif&quot;;\r\ncolor:#333333">⑸检查是否还有其它的控制信号，若有，则对定进行处理；</span></div>\r\n<div style="margin:0cm;margin-bottom:.0001pt;text-indent:24.0pt;line-height:19.5pt;\r\nbackground:#FEFFF8"><span style="font-family:&quot;Adobe 楷体 Std R&quot;,&quot;serif&quot;;\r\ncolor:#333333">⑹把执行指令后所得的指令结果、状态的标志信号、控制信号和定时信号提供给整个微机系统；</span></div>\r\n<div style="margin:0cm;margin-bottom:.0001pt;text-indent:24.0pt;line-height:19.5pt;\r\nbackground:#FEFFF8"><span style="font-family:&quot;Adobe 楷体 Std R&quot;,&quot;serif&quot;;\r\ncolor:#333333">⑺继续处理用户输入的程序和数据。</span></div>\r\n<div style="margin-left:21.0pt;text-indent:21.0pt;">&nbsp;</div>\r\n<div style="text-indent:21.0pt;"><span style="font-family: 宋体; ">可以看到上在计算机工作过程中要始终检查有没有控制信号，而这控制信号中就有关于中断的控制信号。</span></div>\r\n<div style="text-indent:21.0pt;"><span style="font-family: 宋体; ">在计算机系统中中断的例子有很多。用户敲击键盘，每击一次键都要产生一个中断信号。告诉CPU有&ldquo;键盘输入发生了&rdquo;，要求CPU读入键值。至于为什么必须要读入键值呢？其实很简单，在执行程序和用户控制两个事件之间显然是用户控制事件的优先级要高于执行程序的优先级。要不你按下键盘电脑半天没有反应那你还不得把电脑踢了？</span></div>\r\n<div style="text-indent:21.0pt;">&nbsp;</div>\r\n<div style="text-indent:21.0pt;"><span style="font-family: 宋体; ">以I/O中断为例。</span></div>\r\n<div style="text-indent:21.0pt;">&nbsp;</div>\r\n<div style="text-indent:21.0pt;"><span style="font-family: 宋体; ">在I/O设备与主机交换信息时，由于设备本身机电特性的影响，其工作效率较低，与CPU无法匹配。因此，CPU启动之设备之后，往往需要等待一段时间才能实现与I/O设备之间的信息交换。如果在设备准备同时，CPU不做无所谓的等待，而继续执行现行程序，只有当I/O设备就绪向CPU提出请求后在暂时中断CPU现行程序转入I/O服务程序，这便产生了I/O中断。</span></div>\r\n<div style="margin-top:4.8pt;margin-right:0cm;margin-bottom:6.0pt;margin-left:\r\n0cm;text-indent:21.0pt;line-height:13.8pt;background:white">中断是用以提高计算机工作效率、增强计算机功能的一重要技术。最初引入硬件中断，只是出于性能上的考量。如果计算机系统没有中断，则处理器与外部设备通信时，它必须在向该设备发出指令后进行忙等待(Busy waiting，反复轮询该设备是否完成了动作并返回结果。这就造成了大量处理器周期被浪费。引入中断以后，当处理器发出设备请求后就可以立即返回以处理其他任务，而当设备完成动作后，发送中断信号给处理器，后者就可以再回过头获取处理结果。这样，在设备进行处理的周期内，处理器可以执行其他一些有意义的工作，而只付出一些很小的、切换上下文所引发的时间代价。后来被用于CPU外部与内部紧急事件的处理、机器故障的处理、时间控制等多个方面，并产生通过软件方式进入中断处理（软中断）的概念。。</div>\r\n<div style="text-indent:21.0pt;">&nbsp;</div>\r\n<div><b><font size="5"><a name="_Toc337808158">1.3 中断技术差生的优点</a></font></b></div>\r\n<div style="text-indent:21.0pt;"><span style="font-family: 宋体; ">先让我们感受一下中断机制对并发处理带来的帮助。</span></div>\r\n<div style="text-indent:21.0pt;">&nbsp;</div>\r\n<div style="text-indent:21.0pt;"><span style="font-family: 宋体; ">让我们用程序来探讨一下烧水问题，如果没有&ldquo;中断&rdquo;（注意，我们这里只是模仿中断的场景，实际上是用异步事件&mdash;&mdash;消息&mdash;&mdash;处理机制来展示中断产生的效果。毕竟，在用户空间没有办法与实际中断产生直接联系，不过操作系统为用户空间提供的异步事件机制，可以看作是模仿中断的产物），设计如下：</span></div>\r\n<div style="text-indent:21.0pt;">void&nbsp;StayInKitchen()</div>\r\n<div style="text-indent:21.0pt;">{</div>\r\n<div style="margin-left:21.0pt;text-indent:21.0pt;">bool&nbsp;WaterIsBoiled&nbsp;= false;</div>\r\n<div style="margin-left:21.0pt;text-indent:21.0pt;">while&nbsp;(&nbsp;WaterIsBoiled&nbsp;!= true )</div>\r\n<div style="margin-left:21.0pt;text-indent:21.0pt;">{</div>\r\n<div style="margin-left:21.0pt;text-indent:21.0pt;">&nbsp;&nbsp;&nbsp;bool&nbsp;VaporGavenOff&nbsp;&nbsp;= false;</div>\r\n<div style="margin-left:21.0pt;text-indent:21.0pt;">&nbsp;</div>\r\n<div style="text-indent:21.0pt;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(VaporGavenOff&nbsp;)</div>\r\n<div style="text-indent:21.0pt;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WaterIsBoiled&nbsp;&nbsp;=&nbsp;true;</div>\r\n<div style="margin-left:42.0pt;\r\ntext-indent:39.0pt;">else</div>\r\n<div style="margin-left:21.0pt;text-indent:21.0pt;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WaterIsBoiled&nbsp;&nbsp;=&nbsp;false;</div>\r\n<div style="margin-left:21.0pt;text-indent:21.0pt;">}</div>\r\n<div style="margin-left:21.0pt;text-indent:21.0pt;"><span style="font-family: 宋体; ">//&nbsp;</span><span style="font-family: 宋体; ">关煤气炉</span></div>\r\n<div style="margin-left:21.0pt;text-indent:21.0pt;">printf(&ldquo;Close gas oven.\\n&rdquo;);</div>\r\n<div style="margin-left:10.5pt;text-indent:31.5pt;"><span style="font-family: 宋体; ">//&nbsp;</span><span style="font-family: 宋体; ">一切安定下来，终于可以看电视了，10分钟的宝贵时间啊，逝者如斯夫&hellip;</span></div>\r\n<div style="margin-left:10.5pt;text-indent:31.5pt;">watching_tv();</div>\r\n<div style="margin-left:21.0pt;text-indent:21.0pt;">return;</div>\r\n<div style="text-indent:21.0pt;">}</div>\r\n<div style="text-indent:21.0pt;"><span style="font-family: 宋体; ">可以看出，整个流程如同我们前面描述的一样，所有工作要顺序执行，没有办法完成并发任务。</span></div>\r\n<div style="text-indent:21.0pt;">&nbsp;</div>\r\n<div style="text-indent:21.0pt;"><span style="font-family: 宋体; ">如果用&ldquo;中断&rdquo;，在开始烧水的时候设定一个10分钟的&ldquo;闹铃&rdquo;，然后让CPU去看电视（有点难度，具体实现不在我们关心的范围之内，留给读者自行解决吧：&gt;）。等闹钟响的时候再去厨房关炉子。</span></div>\r\n<div style="text-indent:21.0pt;">#include &lt;sys/types.h&gt;</div>\r\n<div style="text-indent:21.0pt;">#include &lt;unistd.h&gt;</div>\r\n<div style="text-indent:21.0pt;">#include &lt;sys/stat.h&gt;</div>\r\n<div style="text-indent:21.0pt;">#include &lt;signal.h&gt;</div>\r\n<div style="text-indent:21.0pt;">#include &lt;stdio.h&gt;</div>\r\n<div style="text-indent:21.0pt;">&nbsp;</div>\r\n<div style="text-indent:21.0pt;"><span style="font-family: 宋体; ">//&nbsp;</span><span style="font-family: 宋体; ">闹钟到时会执行此程序</span></div>\r\n<div style="text-indent:21.0pt;">void&nbsp;sig_alarm(int&nbsp;signo)</div>\r\n<div style="text-indent:21.0pt;">{</div>\r\n<div style="text-indent:21.0pt;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="font-family: 宋体; ">&nbsp;&nbsp;//</span><span style="font-family: 宋体; ">关煤气炉</span></div>\r\n<div style="text-indent:21.0pt;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(&ldquo;Close gas oven.\\n&rdquo;);</div>\r\n<div style="text-indent:21.0pt;">}&nbsp;</div>\r\n<div style="text-indent:21.0pt;">void&nbsp;watching_tv()</div>\r\n<div style="text-indent:21.0pt;">{</div>\r\n<div style="text-indent:21.0pt;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(1)</div>\r\n<div style="text-indent:21.0pt;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</div>\r\n<div style="text-indent:21.0pt;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="font-family: 宋体; ">&nbsp;&nbsp;//&nbsp;</span><span style="font-family: 宋体; ">呵呵，悠哉悠哉</span></div>\r\n<div style="margin-left:21.0pt;text-indent:21.0pt;">}</div>\r\n<div style="text-indent:21.0pt;">}</div>\r\n<div style="text-indent:21.0pt;">&nbsp;</div>\r\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;main()</div>\r\n<div style="text-indent:21.0pt;">{</div>\r\n<div style="text-indent:31.5pt;"><span style="font-family: 宋体; ">//&nbsp;</span><span style="font-family: 宋体; ">点火后设置定时中断</span></div>\r\n<div style="text-indent:21.0pt;">&nbsp;&nbsp;printf(&ldquo;Start to boil water, set Alarm&rdquo;);</div>\r\n<div style="margin-left:10.5pt;text-indent:21.0pt;">if&nbsp;(signal( SIGALRM,&nbsp;sig_alrm&nbsp;) == SIG_ERR)</div>\r\n<div style="text-indent:31.5pt;">{</div>\r\n<div style="text-indent:21.0pt;">&nbsp;&nbsp;&nbsp;&nbsp;perror(&quot;signal(SIGALRM) error&quot;);</div>\r\n<div style="text-indent:21.0pt;">&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;-1;</div>\r\n<div style="text-indent:21.0pt;">&nbsp;&nbsp;}</div>\r\n<div style="text-indent:21.0pt;">&nbsp;</div>\r\n<div style="margin-left:21.0pt;text-indent:10.5pt;"><span style="font-family: 宋体; ">//&nbsp;</span><span style="font-family: 宋体; ">然后就可以欣赏电视节目了</span></div>\r\n<div style="text-indent:21.0pt;">&nbsp;&nbsp;printf(&ldquo;Watching TV!\\n&rdquo;);</div>\r\n<div style="text-indent:31.5pt;">&nbsp;</div>\r\n<div style="text-indent:31.5pt;">watching_tv();</div>\r\n<div style="text-indent:31.5pt;">&nbsp;</div>\r\n<div style="text-indent:31.5pt;">return&nbsp;0;</div>\r\n<div style="text-indent:27.0pt;\r\nline-height:125%;layout-grid-mode:char;"><span style="font-size: 12pt; line-height: 125%; font-family: ''Times New Roman'', serif; ">}</span></div>\r\n<div style="text-indent:27.0pt;\r\nline-height:125%;layout-grid-mode:char;"><span style="font-size: 12pt; line-height: 125%; ">其实，计算机系统引入中断的原因不仅仅是为了适应</span><span style="font-size: 12pt; line-height: 125%; font-family: ''Times New Roman'', serif; ">I/O</span><span style="font-size: 12pt; line-height: 125%; ">设备工作效率低的问题。例如，当计算机正在运行中，若出现突然掉电的情况，将会导致</span><span style="font-size: 12pt; line-height: 125%; font-family: ''Times New Roman'', serif; ">CPU</span><span style="font-size: 12pt; line-height: 125%; ">中的全部信息丢失。倘若能在突然掉电的瞬间启动另一个备份电源，并迅速进行一些必要的处理，例如，将有用的信息送至不受电源影响的存储系统中，待电源恢复后接着使用，这种处理技术也要用终端技术来实现。又如，在实时控制领域中，要求</span><span style="font-size: 12pt; line-height: 125%; font-family: ''Times New Roman'', serif; ">CPU</span><span style="font-size: 12pt; line-height: 125%; ">能及时响应外来信号的请求，并能完成相应的操作，也都需要终端技术实现。</span></div>\r\n<div style="text-indent:27.0pt;\r\nline-height:125%;layout-grid-mode:char;"><span style="font-size: 12pt; line-height: 125%; ">总之有了中断系统计算机的整体效率有了提升，能够应对突发事件实现实时控制</span></div>\r\n<div style="text-indent:27.0pt;\r\nline-height:125%;layout-grid-mode:char;">&nbsp;</div>\r\n<div><b><font size="5"><a name="_Toc337808159">1.4 中断技术差生的缺点</a></font></b></div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div style="text-indent:27.0pt;\r\nline-height:125%;layout-grid-mode:char;"><span style="font-size: 12pt; line-height: 125%; background-color: white; background-position: initial initial; background-repeat: initial initial; ">举了上面的例子你也许就对中断有了一定的了解。同时在上面的例子中当有电话响了时候，你必须停下正在看的书去接电话，那么你就要记下现在看到哪里了。要不你回来的时候就不知道从哪开始看了。这也就出现了一个问题你怎么记住你现在看到的位置呢？当然你说可以凭借记忆，但是CPU是没有记忆功能的，一当有新的数据进来前面的数据就会被覆盖，那么前面的程序执行到哪了你就不知道了。</span></div>\r\n<div style="text-indent:27.0pt;\r\nline-height:125%;layout-grid-mode:char;">&nbsp;</div>\r\n<div style="text-indent:27.0pt;\r\nline-height:125%;layout-grid-mode:char;"><span style="font-size: 12pt; line-height: 125%; background-color: white; background-position: initial initial; background-repeat: initial initial; ">由此可见中断系统是一个复杂的系统。为了实现中断系统激素啊你系统必须有相应的终端系统或终端机构。这样就造成了计算机系统的复杂性。同时不同公司之间的中断系统有着不同的差别这就要求硬件也相应的不同。所以还要有统一的中断标准。</span></div>\r\n<div style="text-indent:27.0pt;\r\nline-height:125%;layout-grid-mode:char;">&nbsp;</div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;"><b>&nbsp;</b></div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;"><b>&nbsp;</b></div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;"><b>&nbsp;</b></div>\r\n<div><b><font size="6"><a name="_Toc337808160">二：基本概念</a></font></b></div>\r\n<div align="center" style="text-align:center;line-height:125%;\r\nlayout-grid-mode:char;"><b>&nbsp;</b></div>\r\n<div><b><font size="5"><a name="_Toc337808161">2.1 中断源</a></font></b></div>\r\n<div><b><font size="5"><a name="_Toc337808162"><span style="background:white">我们把引起中断的原因，或者能够发出中断请求信号的来源统称为中断源。在上面看书的例子中，打断你看书的时间就是中断源（电话响了）。</span></a></font></b></div>\r\n<div><span style="font-family: ''Adobe 楷体 Std R'', serif; background-color: white; background-position: initial initial; background-repeat: initial initial; ">通常中断源有以下几种：</span></div>\r\n<div><span style="font-family: ''Adobe 楷体 Std R'', serif; background-color: white; background-position: initial initial; background-repeat: initial initial; ">　　（１）</span><span style="font-family:&quot;Adobe 楷体 Std R&quot;,&quot;serif&quot;;\r\nbackground:white">外部设备请求中断。一般的外部设备（如键盘、打印机和A / D转换器等）在完成自身的操作后，向CPU发出中断请求，要求CPU为他服务。　由计算机硬件异常或故障引起的中断，也称为内部异常中断。</span></div>\r\n<div><span style="font-family: ''Adobe 楷体 Std R'', serif; background-color: white; background-position: initial initial; background-repeat: initial initial; ">　　（２）故障强迫中断。计算机在一些关键部位都设有故障自动检测装置。如运算溢出、</span><span style="font-family:&quot;Adobe 楷体 Std R&quot;,&quot;serif&quot;;\r\nbackground:white">存储器读出出错、外部设备故障、电源掉电以及其他报警信号等，这些装置的报警信号都能使CPU中断，进行相应的中断处理。</span></div>\r\n<div><span style="font-family: ''Adobe 楷体 Std R'', serif; background-color: white; background-position: initial initial; background-repeat: initial initial; ">　　（３）实时时钟请求中断。在控制中遇到定时检测和控制，为此常采用一个外部</span><span style="font-family:&quot;Adobe 楷体 Std R&quot;,&quot;serif&quot;;\r\nbackground:white">时钟电路（可编程）控制其时间间隔。需要定时时，CPU发出命令使时钟电路开始工作，一旦到达规定时间，时钟电路发出中断请求，由CPU转去完成检测和控制工作。</span></div>\r\n<div><span style="font-family: ''Adobe 楷体 Std R'', serif; background-color: white; background-position: initial initial; background-repeat: initial initial; ">　　（4）数据通道中断。数据通道中断也称</span><span style="font-family:&quot;Adobe 楷体 Std R&quot;,&quot;serif&quot;;\r\nbackground:white">直接存储器存取（ＤＭＡ）操作中断，如磁盘、磁带机或ＣＲＴ等直接与存储器交换数据所要求的中断。</span></div>\r\n<div><span style="font-family: ''Adobe 楷体 Std R'', serif; background-color: white; background-position: initial initial; background-repeat: initial initial; ">　　（５）程序自愿中断。ＣＰＵ执行了特殊指令（自陷指令）或由硬件电路引起的中断是程序自愿中断，是指当用户</span><span style="font-family:&quot;Adobe 楷体 Std R&quot;,&quot;serif&quot;;\r\nbackground:white">调试程序时，程序自愿中断检查中间结果或寻找错误所在而采用的检查手段，如断点中断和单步中断等。</span></div>\r\n<div><b><font size="5"><a name="_Toc337808163">2.2 中断嵌套</a></font></b></div>\r\n<div>&nbsp;</div>\r\n<div><img width="549" height="300" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image014.jpg" v:shapes="_x0000_i1028" alt="" /></div>\r\n<div style="text-indent:21.0pt"><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">中断嵌套指</span><span style="font-family:宋体;background:white">中断系统正在执行一个中断服务时，有另一个优先级更高的中断提出中断请求，这时会暂时终止当前正在执行的级别较低的中断源的服务程序，去处理级别更高的中断源，待处理完毕，再返回到被中断了中断服务程序继续执行，这个过程就是中断嵌套。</span></div>\r\n<div style="text-indent:21.0pt">&nbsp;</div>\r\n<div style="text-indent:21.0pt"><span style="font-family: ''Adobe 楷体 Std R'', serif; background-color: white; background-position: initial initial; background-repeat: initial initial; ">关于中断嵌套。可以这样说，当一个中断正在执行的时候，如果事先设置了中断优先级寄存器IP，那么当一个更高优先级的中断到来的时候会发生中断嵌套，如果没有设置则不会发生任何嵌套；如果有同一个优先级的中断触发，它并不是在&ldquo;不断的申请&rdquo;，而是将它相应的中断标志位置即IE寄存器的某位置位，当CPU执行完当前中断之后，按照查询优先级重新去查询各个中断标志位，进入相应中断。</span></div>\r\n<div><b><font size="5"><a name="_Toc337808164">2.3 中断级联</a></font></b></div>\r\n<div style="text-indent:21.0pt;line-height:125%;layout-grid-mode:\r\nchar;"><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">一个外部</span><span style="font-family:宋体;background:white">中断请求信号通过中断请求线IRQ，传输到IMR（中断屏蔽寄存器），IMR根据所设定的中断屏蔽字（OCW1），决定是将其丢弃还是接受。如果可以接受，则8259A将IRR（中断请求暂存寄存器）中代表此IRQ的位置位，以表示此IRQ有中断请求信号，并同时向CPU的INTR（中断请求）管脚发送一个信号。但CPU这时可能正在执行一条指令，因此CPU不会立即响应。而当这CPU正忙着执行某条指令时，还有可能有其余的IRQ线送来中断请求，这些请求都会接受IMR的挑选。如果没有被屏蔽，那么这些请求也会被放到IRR中，也即IRR中代表它们的IRQ的相应位会被置1。</span></div>\r\n<div style="text-indent:21.0pt;line-height:125%;layout-grid-mode:\r\nchar;"><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">当CPU执行完一条指令时后，会检查一下INTR管脚是否有信号。如果发现有信号，就会转到中断服务，此时，CPU会立即向8259A芯片的INTA（中断应答）管脚发送一个信号。当芯片收到此信号后，判优部件开始工作，它在IRR中，挑选优先级最高的中断，将中断请求送到ISR（中断服务寄存器），也即将ISR中代表此IRQ的位置位，并将IRR中相应位置零，表明此中断正在接受CPU的处理。同时，将它的编号写入</span><span style="font-family:宋体;background:white">中断向量寄存器IVR的低三位（IVR正是由ICW2所指定的，不知你是否还记得ICW2的最低三位在指定时都是0，而在这里，它们被利用了！）这时，CPU还会送来第二个INTA信号，当收到此信号后，芯片将IVR中的内容，也就是此中断的中断号送上通向CPU的数据线。</span></div>\r\n<div style="text-indent:21.0pt;line-height:125%;layout-grid-mode:\r\nchar;"><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; "><img width="567" height="291" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image016.jpg" v:shapes="_x0000_i1029" alt="" /></span></div>\r\n<div><b><font size="5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="font-family:宋体">&nbsp;&nbsp;</span><a name="_Toc337808165"><span style="font-family:宋体">图2.3</span></a></font></b></div>\r\n<div><b><font size="5">&nbsp;</font></b></div>\r\n<div><b><font size="5"><a name="_Toc337808166">2.4 软中断，硬中断</a></font></b></div>\r\n<div align="left" style="line-height: 17pt; background-color: white; background-position: initial initial; background-repeat: initial initial; "><b><span style="font-family:宋体;color:red;">软中断:</span></b><b><span style="font-family:宋体;color:#333333;"><br />\r\n</span></b><span style="font-family:宋体;\r\ncolor:#333333;">1.&nbsp; </span><span style="font-family:\r\n宋体;color:#333333;">编程异常通常叫做软中断<br />\r\n2.&nbsp; 软中断是通讯进程之间用来模拟硬中断的 一种信号通讯方式。<br />\r\n3.&nbsp; 中断源发中断请求或软中断信号后,CPU或接收进程在适当的时机自动进行中断处理或完成软中断信号对应的功能<br />\r\n4.&nbsp; 软中断是软件实现的中断,也就是程序运行时其他程序对它的中断;而硬中断是硬件实现的中断,是程序运行时设备对它的中断。<br />\r\n&nbsp;<br />\r\n</span><b><span style="font-family:宋体;\r\ncolor:red;">硬中断:</span></b><span style="font-family:宋体;color:#333333;"><br />\r\n1.&nbsp; </span><span style="font-family:宋体;\r\ncolor:#333333;">硬中断是由外部事件引起的因此具有随机性和突发性；软中断是执行中断指令产生的，无面外部施加中断请求信号，因此中断的发生不是随机的而是由程序安排好的。<br />\r\n2.&nbsp; 硬中断的中断响应周期，CPU需要发中断回合信号（NMI不需要），软中断的中断响应周期，CPU不需发中断回合信号。<br />\r\n3.&nbsp; 硬中断的中断号是由中断控制器提供的（NMI硬中断中断号系统指定为02H）；软中断的中断号由指令直接给出，无需使用中断控制器。<br />\r\n4.&nbsp; 硬中断是可屏蔽的（NMI硬中断不可屏蔽），软中断不可屏蔽。</span></div>\r\n<div align="left">&nbsp;</div>\r\n<div align="left" style="line-height: 17pt; background-color: white; background-position: initial initial; background-repeat: initial initial; "><b><span style="font-family:宋体;color:red;">区别:</span></b><span style="font-family:宋体;color:#333333;"><br />\r\n1.&nbsp; </span><span style="font-family:宋体;\r\ncolor:#333333;">软中断发生的时间是由程序控制的,而硬中断发生的时间是随机的<br />\r\n2.&nbsp; 软中断是由程序调用发生的,而硬中断是由外设引发的<br />\r\n3.&nbsp; 硬件中断处理程序要确保它能快速地完成它的任务,这样程序执行时才不会等待较长时间</span></div>\r\n<div><b><font size="5"><a name="_Toc337808167">2.5 NMI（不可屏蔽中断）&amp; 可屏蔽中断</a></font></b></div>\r\n<div style="text-indent:21.0pt"><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">非屏蔽中断是出现在<b><i>NMI</i></b>线上的请求 ，不受标志位IF的影响，在当前指令执行完以后，CPU就响应。这种中断通常用于电源故障。非屏蔽中断的优先权高于屏蔽中断。</span></div>\r\n<div style="text-indent:21.0pt"><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">　可屏蔽中断I/O设备发出的所有中断(IRQ)都可以产生可屏蔽中断，受标志位IF的影响，根据中断循序标志的设置来判断CPU是否响应中断请求。</span></div>\r\n<div style="text-indent:21.0pt">&nbsp;</div>\r\n<div style="text-indent:21.0pt">&nbsp;</div>\r\n<div><b><font size="5"><a name="_Toc337808168">2.6 中断请求号 &amp; 中断向量</a></font></b></div>\r\n<div style="text-indent:21.0pt"><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">中断请求号就是中断编号。</span></div>\r\n<div style="text-indent:21.0pt"><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">中断向量</span><span style="font-family:宋体;background:white">中断服务程序的入口地址。在某些计算机中，中断向量的位置存放一条跳转到中断服务程序入口地址的跳转指令。</span></div>\r\n<div><b><font size="5"><a name="_Toc337808169">2.7 中断响应INTA &amp; 中断周期</a></font></b></div>\r\n<div style="text-indent:21.0pt"><b><font size="5"><a name="_Toc337808170"><span style="font-size: 12pt; font-family: 宋体; ">中断响应INTA:当8259A接收到第一个/INTA有效的负脉冲后，将被响应的中断源置入ISR（正在服务寄存器）的对应位，即ISR对应位置1，同时把IRR（中断请求寄存器）的对应位清0；</span></a></font></b></div>\r\n<div align="left" style="margin-bottom: 6.8pt; line-height: 14.95pt; background-color: rgb(255, 252, 246); background-position: initial initial; background-repeat: initial initial; "><span style="font-family: 宋体; ">当8259A接收到第二个/INTA有效的负脉冲后，就将其中断类型号送入数据总线。</span></div>\r\n<div align="left" style="margin-bottom: 6.8pt; line-height: 14.95pt; background-color: rgb(255, 252, 246); background-position: initial initial; background-repeat: initial initial; ">&nbsp;</div>\r\n<div align="left" style="margin-bottom: 6.8pt; line-height: 14.95pt; background-color: rgb(255, 252, 246); background-position: initial initial; background-repeat: initial initial; "><span style="font-family: 宋体; ">中短周期：当CPU采用中断方式实现I/O交换信息时，CPU在每条指令执行结束之后检查是否又中断请求，如果有就执行中断响应，又称中短周期。</span></div>\r\n<div><b><font size="5"><a name="_Toc337808171">2.8 单步中断 &amp; IF中断允许标志位</a></font></b></div>\r\n<div><span style="font-family: 宋体; ">单步中断：执行一条指令中断一次。</span></div>\r\n<divre style="margin-bottom:6.25pt;line-height:13.75pt;background:#FFFCF6">IF中断允许标志位：标识寄存器中的一位，可以屏蔽 可屏蔽中断请求INTR\r\n<pre style="margin-bottom: 6.25pt; line-height: 13.75pt; background-position: initial initial; background-repeat: initial initial; ">\r\n如果外设有可屏蔽中断请求INTR，而此时CPU内IF=0，那么CPU不会响应中断</pre>\r\n<pre style="margin-bottom: 6.25pt; line-height: 13.75pt; background-position: initial initial; background-repeat: initial initial; ">\r\n&nbsp;</pre>\r\n<pre style="margin-bottom: 6.25pt; line-height: 13.75pt; background-position: initial initial; background-repeat: initial initial; ">\r\n只有可屏蔽中断请求INTR和IF有关系，</pre>\r\n<pre style="margin-bottom: 6.25pt; line-height: 13.75pt; background-position: initial initial; background-repeat: initial initial; ">\r\n内中断和不可屏蔽中断NMI，都不受IF的影响</pre>\r\n<div><b><font size="5"><a name="_Toc337808172">2.9 IMR中断屏蔽字&nbsp; &amp; 中断优先级</a></font></b></div>\r\n<pre style="margin-bottom: 6.25pt; line-height: 13.75pt; background-position: initial initial; background-repeat: initial initial; ">\r\nIMR中断屏蔽字：以实现对各中断的屏蔽。</pre>\r\n<pre style="margin-bottom: 6.25pt; line-height: 13.75pt; background-position: initial initial; background-repeat: initial initial; ">\r\n中断优先级：<span style="background:white">为使系统能及时响应并处理发生的所有中断，系统根据引起中断事件的重要性和紧迫程度，硬件将</span><span style="background:white">中断源分为若干个级别，称作中断优先级。</span></pre>\r\n<div><b><font size="5"><a name="_Toc337808173">2.10&nbsp;&nbsp; 中断控制器 &amp; APIC</a> </font></b></div>\r\n<p><span style="font-family:宋体;Times New Roman&quot;;Times New Roman&quot;">中断控制器：</span><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">中断控制器的功能就是在多个中断源的系统中，接收外部的中断请求，并进行判断，选中当前优先级最高的中断请求，再将此请求送到CPU的INTR端;当CPU响应中断并进入中断子程序的处理过程后，中断控制器仍负责外部的中断请求的管理。比如当某个外部中断的请求的优先级高于当前正在处理的中断优先级时，中断控制器会让此中断通过而到达CPU的INTR端，从而实现中断的嵌套，反之，对其它的级别较底的中断则给予禁止。</span></p>\r\n</divre>\r\n</span></div>\r\n<div>&nbsp;</div>\r\n<div><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">APIC:</span><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">高级可编程中断控制器</span></div>\r\n<div><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">APIC </span><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">是装置的扩充组合用来</span><span style="font-family:宋体;background:white">驱动&nbsp;Interrupt 控制器。在目前的建置中，系统的每一个部份都是经由 APIC Bus 连接的。&quot;本机 APIC&quot; 为系统的一部份，负责传递 Interrupt 至指定的处理器；举例来说，当一台机器上有三个处理器则它必须相对的要有三个本机 APIC。自 1994 年的 Pentium P54c 开始Intel 已经将本机 APIC 建置在它们的处理器中。实际建置了 Intel 处理器的电脑就已经包含了 APIC 系统的部份。</span></div>\r\n<div>&nbsp;</div>\r\n<div><b><font size="5"><a name="_Toc337808174">2.11&nbsp; 中断共享 &amp; 中断冲突</a></font></b></div>\r\n<divre style="margin-bottom:6.8pt;line-height:14.95pt;\r\nbackground:#FFFCF6">&nbsp;&nbsp;&nbsp;&nbsp; 中断共享就是某些端口公用一个中断请求，以前主板有很多PCI,第一和第五个常常共享，但只能使用其中一个，都是用会造成硬件冲突\r\n<pre style="margin-bottom: 6.8pt; line-height: 14.95pt; background-position: initial initial; background-repeat: initial initial; ">\r\n&nbsp;&nbsp;&nbsp;&nbsp; 中断冲突终端之间共用资源发生冲突。</pre>\r\n<div><b><font size="5"><a name="_Toc337808175">2.12&nbsp; MSI-X中断（PCIe）、中断处理子程序</a></font></b></div>\r\n<p style="margin-top:1.35pt"><span style="\r\ncolor:#222222">MSI-X </span><span style="color:#222222">中断是 MSI 中断的增强版本，与 MSI 中断有相同功能，具有以下关键区别：</span></p>\r\n</divre>\r\n</div>\r\n<div style="margin-left:17.7pt"><span style="color:#222222">每个设备最多支持 2048 个 MSI-X 中断向量。</span></div>\r\n<div style="margin-left:17.7pt"><span style="\r\ncolor:#222222">每个中断向量的地址和数据项都是唯一的。</span></div>\r\n<div style="margin-left:17.7pt"><span style="color:#222222">MSI-X </span><span style="\r\ncolor:#222222">支持按函数屏蔽和按向量屏蔽。</span></div>\r\n<div style="margin-left:17.7pt"><span style="\r\ncolor:#222222">中断处理子程序：处理中断请求的程序</span></div>\r\n<div><b><font size="5"><a name="_Toc337808176">2.13&nbsp; 0号中断、1号中断</a></font></b></div>\r\n<div style="margin-left:17.7pt"><span style="color:#222222">0</span><span style="\r\ncolor:#222222">号中断：</span><span style="background-color: white; background-position: initial initial; background-repeat: initial initial; ">号中断处理程序用于处理除法运算溢出，称为&quot;除数为0中断&quot;。当CPU检测到除法运算溢出，自动调用0号中断处理程序，无&quot;INT 0&quot;指令。</span></div>\r\n<div style="margin-left:17.7pt"><span style="background-color: white; background-position: initial initial; background-repeat: initial initial; ">1</span><span style="background-color: white; background-position: initial initial; background-repeat: initial initial; ">号中断：当CPU的TF标志置1时，CPU每执行一条指令，就调用1号中断处理程序，因此，它称为&quot;单步中断&quot;。 当CPU检测到TF=1时，自动进入单步方式，无&quot;INT 1&quot;指令。 该中断处理程序用于调试程序。&nbsp;</span></div>\r\n<div style="margin-left:17.7pt">&nbsp;</div>\r\n<div><b><font size="5"><a name="_Toc337808177">2.14&nbsp; 中断描述符、中断描述符表</a></font></b></div>\r\n<div><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">中断描述符：描述中断的一组数据，包括中断号等。</span></div>\r\n<div><span style="font-family:宋体;Times New Roman&quot;;Times New Roman&quot;">中断描述表：</span><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">将每个异常或</span><span style="font-family:宋体;background:white">中断向量分别与它们的处理过程联系起来。与GDT和LDT表类似，IDT也是由8字节长描述符组成的一个数组。</span></div>\r\n<div>&nbsp;</div>\r\n<div><b><font size="5"><a name="_Toc337808178">2.15&nbsp; 异常</a></font></b></div>\r\n<div style="line-height:17.65pt;background:white"><span style="color:#333333">中断通常分为同步中断和异步中断。</span></div>\r\n<div style="line-height:17.65pt;background:white"><span style="color:#333333">同步中断：当指令执行时由</span>CPU<span style="color:#333333">控制单元产生的，称为同步，是因为只有当一条指令终止执行后</span>CPU<span style="color:#333333">才会发出中断。</span></div>\r\n<div style="line-height:17.65pt;background:white"><span style="color:#333333">异步中断：由其他硬件设备依照</span>CPU<span style="color:#333333">时钟信号随机产生的。</span></div>\r\n<div><b>&nbsp;</b></div>\r\n<div><b><font size="5"><a name="_Toc337808179">2.16&nbsp; 中断门、OS的事件、消息</a></font></b></div>\r\n<div style="text-indent:21.0pt"><span style="font-family:宋体;color:#333333;background:white">通过中断门的转移和通过陷阱门的转移之间的差别只是对IF标志的处理。对于中断门，在转移过程中把IF置为0，使得在处理程序执行期间屏蔽掉INTR中断(当然，在中断处理程序中可以人为设置IF标志打开中断，以使得在处理程序执行期间允许响应可屏蔽中断)；对于陷阱门，在转移过程中保持IF位不变，即如果IF位原来是1，那么通过陷阱门转移到处理程序之后仍允许INTR中断。因此，中断门最适宜于处理中断，而陷阱门适宜于处理异常。OS的事件就是操作系统事件。</span></div>\r\n<div style="text-indent:21.0pt"><span style="font-family:宋体;color:#333333;background:white">消息：</span><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">消息，</span><span style="font-family:宋体;background:white">软件对象之间进行交互作用和通讯是利用消息的</span></div>\r\n<div style="text-indent:21.0pt">&nbsp;</div>\r\n<div><b><font size="6"><a name="_Toc337808180">三：中断资源相关</a></font></b></div>\r\n<div align="center" style="text-align:center"><b>&nbsp;</b></div>\r\n<div><b><font size="5"><a name="_Toc337808181">3.1&nbsp; 我的电脑中断相关资源占用情况</a></font></b></div>\r\n<div><img width="566" height="670" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image017.jpg" v:shapes="_x0000_i1030" alt="" /></div>\r\n<div style="text-indent:21.0pt"><span style="font-family:宋体"><img width="482" height="715" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image018.jpg" v:shapes="_x0000_i1031" alt="" /></span></div>\r\n<div style="text-indent:21.0pt"><span style="font-family:宋体"><img width="472" height="865" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image020.jpg" v:shapes="_x0000_i1032" alt="" /></span></div>\r\n<div style="text-indent:21.0pt"><span style="font-family:宋体"><img width="566" height="303" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image022.jpg" v:shapes="_x0000_i1033" alt="" /></span></div>\r\n<div style="text-indent:21.0pt">&nbsp;</div>\r\n<div style="text-indent:21.0pt">&nbsp;</div>\r\n<div><b><font size="5"><a name="_Toc337808182">3.2 ISA中断</a></font></b></div>\r\n<div><img width="566" height="670" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image017.jpg" v:shapes="_x0000_i1034" alt="" /></div>\r\n<div>&nbsp;</div>\r\n<div style="text-indent:21.0pt"><span style="font-family:宋体"><img width="482" height="715" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image018.jpg" v:shapes="_x0000_i1035" alt="" /></span></div>\r\n<div style="text-indent:21.0pt"><span style="font-family:宋体"><img width="472" height="865" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image020.jpg" v:shapes="_x0000_i1036" alt="" /></span></div>\r\n<div style="text-indent:21.0pt"><span style="font-family:宋体"><img width="566" height="91" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image024.jpg" v:shapes="_x0000_i1037" alt="" /></span></div>\r\n<div style="text-indent:21.0pt">&nbsp;</div>\r\n<div style="text-indent:21.0pt">&nbsp;</div>\r\n<div><b><font size="5"><a name="_Toc337808183">3.3 PCI中断</a></font></b></div>\r\n<div style="text-indent:21.0pt">&nbsp;</div>\r\n<div style="text-indent:21.0pt"><span style="font-family:宋体"><img width="567" height="209" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image026.jpg" v:shapes="_x0000_i1038" alt="" /></span></div>\r\n<div style="text-indent:21.0pt">&nbsp;</div>\r\n<div><b><font size="5"><a name="_Toc337808184">3.4 IRQ 0-15中断请求外的</a></font></b></div>\r\n<div style="text-indent:21.0pt"><span style="font-family:宋体">其他是microsoft acpi-compliant system的。</span><span style="font-family: 宋体; ">微软ACPI-Compliant系统</span><span style="font-family:宋体">，</span><span style="font-family: 宋体; ">全名Advanced Configuration and Power Management Interface</span></div>\r\n<div><span style="font-family: 宋体; ">ACPI</span><span style="font-family: 宋体; ">表示高级配置和电源管理接口（Advanced Configuration and Power Management Interface）。对于Windows2000，ACPI定义了Windows 2000、BIOS和系统硬件之间的新型工作接口。这些新接口包括允许Windows 2000控制电源管理和设备配置的机制。 ACPI意图是让系统而不是BIOS来全面控制电源管理，使系统更加省电。 其特点主要有：提供立刻开机功能，即开机后可立即恢复到上次关机时的状态，光驱、软驱和硬盘在未使用时会自动关掉电源，使用时再打开；支持在开电状态下既插即拔，随时更换功能。</span></div>\r\n<div>&nbsp;</div>\r\n<div><b><font size="6"><a name="_Toc337808185">四：中断系统</a></font></b></div>\r\n<div align="center" style="text-align:center"><b>&nbsp;</b></div>\r\n<div align="center" style="text-align:center"><b>&nbsp;</b></div>\r\n<div><b><font size="5"><a name="_Toc337808186">4.1 中断系统怎样协调完成中断过程</a></font></b></div>\r\n<p>\r\n<divre style="margin-bottom:6.25pt;line-height:13.75pt;background:#FFFCF6">中断过程：中断请求，中断判优，中断响应，中断处理，中断返回\r\n<pre style="margin-bottom: 6.25pt; line-height: 13.75pt; background-position: initial initial; background-repeat: initial initial; "><img width="566" height="529" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image028.jpg" v:shapes="_x0000_i1039" alt="" /></pre>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="font-family:宋体;Times New Roman&quot;;Times New Roman&quot;">图</span>4.1<span style="font-family:\r\n宋体;Times New Roman&quot;;Times New Roman&quot;">中断过程</span></p>\r\n<div style="text-indent:21.0pt;"><span style="font-family: 宋体; ">CPU</span><span style="font-family: 宋体; ">执行完一条指令后，下一条指令的逻辑地址存放在cs和eip这对寄存器中。在执行新指令前，控制单元会检查在执行前一条指令的过程中是否有中断或异常发生。如果有，控制单元就会抛下指令，进入下面的流程：</span></div>\r\n<div style="margin-left:39.0pt;text-indent:-18.0pt;"><span style="font-family: 宋体; ">1.</span><span style="font-family: 宋体; ">确定与中断或异常关联的向量i&nbsp;(0--255)</span></div>\r\n<div style="margin-left:39.0pt;text-indent:-18.0pt;"><span style="font-family: 宋体; ">2.</span><span style="font-family: 宋体; ">寻找向量对应的处理程序</span></div>\r\n<div style="margin-left:39.0pt;text-indent:-18.0pt;"><span style="font-family: 宋体; ">3.</span><span style="font-family: 宋体; ">保存当前的&ldquo;工作现场&rdquo;，执行中断或异常的处理程序</span></div>\r\n<div style="margin-left:39.0pt;text-indent:-18.0pt;"><span style="font-family: 宋体; ">4.</span><span style="font-family: 宋体; ">处理程序执行完毕后，把控制权交还给控制单元</span></div>\r\n<div style="margin-left:39.0pt;text-indent:-18.0pt;"><span style="font-family: 宋体; ">5.</span><span style="font-family: 宋体; ">控制单元恢复现场，返回继续执行原程序</span></div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div><span style="position:\r\nrelative;z-index:251663360;left:-64px;top:58px;width:553px;height:298px"><img width="553" height="240" src="file:///C:/Users/Daidong/AppData/Local/Temp/msohtmlclip1/01/clip_image030.gif" v:shapes="_x0000_s1037" alt="" /></span>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<br clear="ALL" />\r\n<div><b><span style="font-size:18.0pt;font-family:宋体">中断控制器执行下列动作：</span></b></div>\r\n<div><span style="font-family:宋体">1</span><span style="font-family:宋体">，监视IRQ线，对引发信号检查</span></div>\r\n<div><span style="font-family:宋体">2</span><span style="font-family:宋体">，如果一个引发信号出现在IRQ线上</span></div>\r\n<div><span style="font-family:宋体">a</span><span style="font-family:宋体">，把此信号转换成对应的中断向量</span></div>\r\n<div><span style="font-family:宋体">b</span><span style="font-family:宋体">，把这个向量存放在中断控制器的一个I/O端口，从而允许CPU通过数据总线读这个向量</span></div>\r\n<div><span style="font-family:宋体">c</span><span style="font-family:宋体">，把引发信号发送到处理器的INTR引脚，即产生一个中断</span></div>\r\n<div><span style="font-family:宋体">d</span><span style="font-family:宋体">，等待，直到CPU应答这个信号；收到应答后，清INTR引脚</span></div>\r\n<div><span style="font-family:宋体">3</span><span style="font-family:宋体">，返回到第一步</span></div>\r\n<div>&nbsp;</div>\r\n<div><span style="font-size:14.0pt;font-family:宋体">Windows 2000</span><span style="font-size:14.0pt;font-family:宋体">在系统启动时填写IDT表</span></div>\r\n<div>&nbsp;</div>\r\n<div><span style="font-size:14.0pt;font-family:宋体">当中断发生时，处理器将会根据IDT将控制转移给适当的中断/异常处理</span></div>\r\n<div><b><font size="6"><a name="_Toc337808187">五：多处理器系统的中断</a></font></b></div>\r\n<div align="center" style="text-align:center"><b>&nbsp;</b></div>\r\n<div><b><font size="5"><a name="_Toc337808188">5.1 怎么连接</a></font></b></div>\r\n<div><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">对于多核CPU，优化</span><span style="font-family:宋体;background:white">操作系统任务调度算法是保证效率的关键。一般任务调度算法有全局队列调度和局部队列调度。前者是指操作系统维护一个全局的任务等待队列，当系统中有一个CPU核心空闲时，操作系统就从全局任务等待队列中选取就绪任务开始在此核心上执行。</span></div>\r\n<div><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">　　这种方法的优点是CPU核心利用率较高。后者是指操作系统为每个CPU</span><span style="font-family:宋体"><a href="http://baike.baidu.com/view/1366.htm" target="_blank"><span style="color:#136EC2;background:white">内核</span></a></span><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">维护一个局部的任务等待队列，当系统中有一个CPU内核空闲时，便从该核心的任务等待队列中选取恰当的任务执行，这种方法的优点是任务基本上无需在多个CPU核心间切换，有利于提高CPU核心局部Cache命中率。目前多数多核CPU操作系统采用的是基于全局队列的任务调度算法。</span></div>\r\n<div style="text-indent:23.25pt"><span style="font-family: 宋体; background-color: white; background-position: initial initial; background-repeat: initial initial; ">多核的中断处理和单核有很大不同。多核的各处理器之间需要通过</span><span style="font-family:宋体;background:white">中断方式进行通信，所以多个处理器之间的本地中断控制器和负责仲裁各核之间中断分配的全局中断控制器也需要封装在芯片内部。</span></div>\r\n<d', '2012-10-19', '2012-10-19', 0);
INSERT INTO `lib_news` (`id`, `title`, `author`, `adder`, `text`, `CreateDate`, `UpdateDate`, `isdelete`) VALUES
(4, '热烈庆祝和谐图书馆中期检查', '和谐委员会', 'admin', '<h1 style="text-align: center; ">&nbsp;<span style="color: rgb(255, 0, 0); ">热烈庆祝和谐图书馆中期检查！！！</span></h1>\r\n<h1 style="text-align: center; "><span style="color: rgb(255, 0, 0); ">请各位老师多多关照~~</span></h1>\r\n<p>&nbsp;</p>\r\n<p><span style="font-size: medium; ">&nbsp; Pureweber开发小组</span></p>\r\n<table width="200" border="1" cellpadding="1" cellspacing="1">\r\n    <tbody>\r\n        <tr>\r\n            <td>&nbsp; 项目组长</td>\r\n            <td>张艳锐</td>\r\n        </tr>\r\n        <tr>\r\n            <td>&nbsp; &nbsp;程序员</td>\r\n            <td>代东</td>\r\n        </tr>\r\n        <tr>\r\n            <td>&nbsp; &nbsp;程序员</td>\r\n            <td>李琛轩</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n<p>&nbsp;</p>', '2012-10-26', '2012-10-26', 0),
(5, '呵呵呵呵复呵呵', '呵呵呵呵复呵呵 ', 'aaa', '<h1 style="text-align: center; ">呵呵呵呵复呵呵&nbsp;</h1>', '2012-10-28', '2012-11-10', 0);

-- --------------------------------------------------------

--
-- 表的结构 `lib_opreator`
--

CREATE TABLE IF NOT EXISTS `lib_opreator` (
  `opreatorid` int(10) NOT NULL AUTO_INCREMENT,
  `name` varchar(30) CHARACTER SET latin1 DEFAULT NULL,
  `IDcode` varchar(20) CHARACTER SET latin1 DEFAULT NULL,
  `address` varchar(100) CHARACTER SET latin1 DEFAULT NULL,
  `startworkingtime` date DEFAULT NULL,
  PRIMARY KEY (`opreatorid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='操作员表（跟管理员表合并了）' AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- 表的结构 `lib_order_borrow`
--

CREATE TABLE IF NOT EXISTS `lib_order_borrow` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `reader` int(11) NOT NULL,
  `bookID` varchar(30) NOT NULL,
  `borrowtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `canceltime` datetime NOT NULL,
  `iscancel` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=10 ;

--
-- 转存表中的数据 `lib_order_borrow`
--

INSERT INTO `lib_order_borrow` (`id`, `reader`, `bookID`, `borrowtime`, `canceltime`, `iscancel`) VALUES
(1, 60, 'TP689-38874', '2012-11-15 05:11:11', '2012-11-15 14:04:22', 1),
(2, 60, 'TP233-123', '2012-11-15 05:11:20', '2012-11-15 13:47:02', 1),
(3, 60, 'TP689-38874', '2012-11-15 05:57:24', '2012-11-15 14:04:22', 1),
(4, 60, 'TP689-38874', '2012-11-15 05:57:38', '2012-11-15 14:04:22', 1),
(5, 60, 'TP1111-121', '2012-11-15 06:00:58', '2012-11-16 09:33:07', 1),
(6, 60, 'TP1111-121', '2012-11-15 06:01:13', '2012-11-16 09:33:07', 1),
(7, 60, 'TP689-38874', '2012-11-15 06:02:44', '2012-11-15 14:04:22', 1),
(8, 60, 'TP689-38874', '2012-11-15 06:07:02', '0000-00-00 00:00:00', 0),
(9, 60, 'TP233-123', '2012-11-16 01:34:08', '0000-00-00 00:00:00', 0);

-- --------------------------------------------------------

--
-- 表的结构 `lib_publishing`
--

CREATE TABLE IF NOT EXISTS `lib_publishing` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `ISBN` varchar(30) NOT NULL DEFAULT '',
  `ISBNname` varchar(30) NOT NULL,
  `Email` varchar(200) DEFAULT NULL,
  `phone` varchar(30) DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE KEY `ISBN` (`ISBN`),
  UNIQUE KEY `ISBNname` (`ISBNname`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COMMENT='出版社表' AUTO_INCREMENT=9 ;

--
-- 转存表中的数据 `lib_publishing`
--

INSERT INTO `lib_publishing` (`id`, `ISBN`, `ISBNname`, `Email`, `phone`, `created_at`) VALUES
(1, '1', '天朝人民出版社', '', '', '0000-00-00 00:00:00'),
(8, '978-7-115-23095-9', '人民邮电出版社', '315@ptpress.com.cn', '18945027868', '2012-10-08 23:06:06');

-- --------------------------------------------------------

--
-- 表的结构 `lib_reader`
--

CREATE TABLE IF NOT EXISTS `lib_reader` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `password` varchar(100) NOT NULL,
  `sex` tinyint(1) DEFAULT NULL,
  `age` tinyint(4) DEFAULT NULL,
  `barcode` varchar(30) DEFAULT NULL,
  `birthday` date DEFAULT NULL,
  `papertype` varchar(10) NOT NULL,
  `papercode` varchar(30) NOT NULL,
  `telephone` varchar(20) DEFAULT NULL,
  `Email` varchar(100) NOT NULL,
  `CreateDate` date DEFAULT NULL,
  `opreatorid` int(10) DEFAULT NULL,
  `remark` text,
  `credit` int(10) DEFAULT NULL,
  `typeid` int(11) NOT NULL,
  `UpdateDate` date NOT NULL,
  `isdelete` tinyint(1) NOT NULL DEFAULT '0',
  `BooksInBorrow` tinyint(4) NOT NULL DEFAULT '0',
  `LastLoginTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COMMENT='读者表' AUTO_INCREMENT=73 ;

--
-- 转存表中的数据 `lib_reader`
--

INSERT INTO `lib_reader` (`id`, `name`, `password`, `sex`, `age`, `barcode`, `birthday`, `papertype`, `papercode`, `telephone`, `Email`, `CreateDate`, `opreatorid`, `remark`, `credit`, `typeid`, `UpdateDate`, `isdelete`, `BooksInBorrow`, `LastLoginTime`) VALUES
(7, 'daidong', 'e10adc3949ba59abbe56e057f20f883e', NULL, NULL, NULL, NULL, '身份证', '1234567890', NULL, 'daidong@daidong.com', NULL, NULL, NULL, NULL, 0, '0000-00-00', 0, 3, '0000-00-00 00:00:00'),
(43, 'daidong123654@126.com', 'e10adc3949ba59abbe56e057f20f883e', NULL, NULL, NULL, NULL, '身份证', '000000000000000000', NULL, 'tiantina@gmail.com', NULL, NULL, NULL, NULL, 0, '0000-00-00', 0, 1, '0000-00-00 00:00:00'),
(44, 'zhangyanrui', 'sdfasdfasfasf', NULL, NULL, NULL, NULL, 'sfdasf', 'sfasfdsfsdfs', 'fdsafs', 'sfsdfsf', NULL, NULL, NULL, NULL, 0, '0000-00-00', 0, 0, '0000-00-00 00:00:00'),
(45, 'asfdsa', 'asfdasf', 1, 21, NULL, NULL, 'fsd', 'safdasdfasdf', 'asdffasdf', 'fsadadfsaf', '2012-10-01', NULL, 'safasf', 122, 1, '2012-10-03', 1, 0, '0000-00-00 00:00:00'),
(46, 'li desheng', 'e11170b8cbd2d74102651cb967fa28e5', NULL, NULL, NULL, NULL, '身份证', '11111111', NULL, 'daidong123654@gmail.com', '2012-10-11', NULL, NULL, NULL, 1, '0000-00-00', 0, 1, '0000-00-00 00:00:00'),
(47, 'ds', 'ef800207a3648c7c1ef3e9fe544f17f0', NULL, NULL, NULL, NULL, '身份证', 'dddddddd', NULL, 'df@df.com', '2012-10-11', NULL, NULL, NULL, 1, '0000-00-00', 0, 0, '0000-00-00 00:00:00'),
(48, 'sfadasf', 'ef800207a3648c7c1ef3e9fe544f17f0', NULL, NULL, NULL, NULL, '学生证', 'ddddddddddddddddddd', NULL, 'dfasd@111.com', '2012-10-16', NULL, NULL, NULL, 1, '0000-00-00', 0, 0, '0000-00-00 00:00:00'),
(49, 'sfdafasdfsdf', '8f0d5abfa13f7f6b6ef2981eb3757a07', NULL, NULL, NULL, NULL, '身份证', 'ddddddddddddddddd', NULL, 'sdafasfd@222.com', '2012-10-16', NULL, NULL, NULL, 1, '0000-00-00', 0, 0, '0000-00-00 00:00:00'),
(50, 'sfdsadfsafasf', 'd340c5e973c682f96d59a024085bd202', NULL, NULL, NULL, NULL, '身份证', 'ddddddddddddddd', NULL, 'sfasfsdfssdf@s.com', '2012-10-16', NULL, NULL, NULL, 1, '0000-00-00', 0, 0, '0000-00-00 00:00:00'),
(51, 'ddddddddd', 'd340c5e973c682f96d59a024085bd202', NULL, NULL, NULL, NULL, '身份证', 'ddddddddddddd', NULL, 'dddddddddd@s.com', '2012-10-16', NULL, NULL, NULL, 1, '0000-00-00', 0, 0, '0000-00-00 00:00:00'),
(52, '礼包二', '4d6d955ca289f82e3a6e1f52f40108f3', NULL, NULL, '2012-10-160152', NULL, '身份证', 'dddddddddddddd', NULL, 'lll@lll.com', '2012-10-16', NULL, NULL, NULL, 1, '0000-00-00', 0, 0, '0000-00-00 00:00:00'),
(53, 'hehedd', '706db108edd9c5bcaca5e8b17a3cad25', NULL, NULL, '201210160153', NULL, '学生证', 'ddddddddddddd', NULL, 'dd@1.com', '2012-10-16', NULL, NULL, NULL, 1, '0000-00-00', 1, 1, '0000-00-00 00:00:00'),
(54, 'daidong', '96e79218965eb72c92a549dd5a330112', NULL, NULL, NULL, NULL, '身份证', '11111111111', NULL, 'dd@126.com', '2012-10-28', NULL, NULL, NULL, 1, '0000-00-00', 0, 0, '0000-00-00 00:00:00'),
(55, 'li desheng11', '96e79218965eb72c92a549dd5a330112', NULL, NULL, NULL, NULL, '身份证', '111111', NULL, 'daidong11123654@gmail.com', '2012-11-07', NULL, NULL, NULL, 1, '0000-00-00', 0, 0, '2012-11-07 12:35:02'),
(57, 'dd', '96e79218965eb72c92a549dd5a330112', NULL, NULL, '2012-11-071', NULL, '身份证', '111111', NULL, 'dd@11.com', '2012-11-07', NULL, NULL, NULL, 1, '0000-00-00', 0, 0, '2012-11-07 13:20:54'),
(58, 'dddd', '96e79218965eb72c92a549dd5a330112', NULL, NULL, '201211071', NULL, '身份证', '111111', NULL, 'dddd@11.com', '2012-11-07', NULL, NULL, NULL, 1, '0000-00-00', 0, 0, '2012-11-07 13:22:11'),
(59, 'aa', '0b4e7a0e5fe84ad35fb5f95b9ceeac79', NULL, NULL, '201211071', NULL, '身份证', 'aaaaaa', NULL, 'aaa@12.com', '2012-11-07', NULL, NULL, NULL, 1, '0000-00-00', 0, 0, '2012-11-07 13:23:53'),
(60, 'daidong', '0b4e7a0e5fe84ad35fb5f95b9ceeac79', 0, NULL, '2012110760', NULL, '身份证', 'aaaaaa', '18945027868', 'aada@12.com', '2012-11-07', NULL, '文学', NULL, 1, '2012-11-16', 0, 3, '2012-11-16 01:11:20'),
(62, 'li desheng', '934b535800b1cba8f96a5d72f72f1611', NULL, NULL, '2012111462', NULL, '身份证', '2', NULL, 'daidong123654@gmail.com', '2012-11-14', NULL, NULL, NULL, 1, '0000-00-00', 0, 0, '2012-11-14 12:10:02'),
(63, 'admin1', '1bbd886460827015e5d605ed44252251', NULL, NULL, NULL, NULL, '身份证', 'aa', NULL, 'aaa@12.com', '2012-11-14', NULL, NULL, NULL, 1, '0000-00-00', 0, 0, '2012-11-14 12:24:18'),
(64, 'admin1', '1bbd886460827015e5d605ed44252251', NULL, NULL, NULL, NULL, '身份证', 'aa', NULL, 'aaa@12.com', '2012-11-14', NULL, NULL, NULL, 1, '0000-00-00', 0, 0, '2012-11-14 12:25:18'),
(65, 'admin1', '0b4e7a0e5fe84ad35fb5f95b9ceeac79', NULL, NULL, NULL, NULL, '身份证', 'aaa', NULL, 'aaa@12.com', '2012-11-14', NULL, NULL, NULL, 1, '0000-00-00', 0, 0, '2012-11-14 12:44:53'),
(66, 'admin1', '0b4e7a0e5fe84ad35fb5f95b9ceeac79', NULL, NULL, NULL, NULL, '身份证', 'aaa', NULL, 'aaa@12.com', '2012-11-14', NULL, NULL, NULL, 1, '0000-00-00', 0, 0, '2012-11-14 12:45:55'),
(67, 'admin1', '0b4e7a0e5fe84ad35fb5f95b9ceeac79', NULL, NULL, NULL, NULL, '身份证', 'aaa', NULL, 'aaa@12.com', '2012-11-14', NULL, NULL, NULL, 1, '0000-00-00', 0, 0, '2012-11-14 12:47:24'),
(68, 'admin1', '0b4e7a0e5fe84ad35fb5f95b9ceeac79', NULL, NULL, NULL, NULL, '身份证', 'aaa', NULL, 'aaa@12.com', '2012-11-14', NULL, NULL, NULL, 1, '0000-00-00', 0, 0, '2012-11-14 12:48:04'),
(69, 'admin1', '0b4e7a0e5fe84ad35fb5f95b9ceeac79', NULL, NULL, NULL, NULL, '身份证', 'aaa', NULL, 'aaa@12.com', '2012-11-14', NULL, NULL, NULL, 1, '0000-00-00', 0, 0, '2012-11-14 12:48:37'),
(70, 'admin1', '0b4e7a0e5fe84ad35fb5f95b9ceeac79', NULL, NULL, NULL, NULL, '身份证', 'aaa', NULL, 'aaa@12.com', '2012-11-14', NULL, NULL, NULL, 1, '0000-00-00', 0, 0, '2012-11-14 12:49:03'),
(71, 'admin1', '0b4e7a0e5fe84ad35fb5f95b9ceeac79', NULL, NULL, NULL, NULL, '身份证', 'aaa', NULL, 'aaa@12.com', '2012-11-14', NULL, NULL, NULL, 1, '0000-00-00', 0, 0, '2012-11-14 12:50:03'),
(72, 'admin1', '0b4e7a0e5fe84ad35fb5f95b9ceeac79', NULL, NULL, NULL, NULL, '身份证', 'aaa', NULL, 'aaa@12.com', '2012-11-14', NULL, NULL, NULL, 1, '0000-00-00', 0, 0, '2012-11-14 12:50:56');

-- --------------------------------------------------------

--
-- 表的结构 `lib_readertype`
--

CREATE TABLE IF NOT EXISTS `lib_readertype` (
  `id` int(10) unsigned NOT NULL DEFAULT '0',
  `name` varchar(50) NOT NULL,
  `numberdays` tinyint(4) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='读者类型表';

--
-- 转存表中的数据 `lib_readertype`
--

INSERT INTO `lib_readertype` (`id`, `name`, `numberdays`) VALUES
(0, '老师', 60),
(1, '学生', 30);

-- --------------------------------------------------------

--
-- 表的结构 `lib_role`
--

CREATE TABLE IF NOT EXISTS `lib_role` (
  `id` smallint(6) NOT NULL AUTO_INCREMENT,
  `name` varchar(64) COLLATE utf8_bin NOT NULL,
  `action_list` text COLLATE utf8_bin,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='角色表（不同的管理员有不同的角色和权限）' AUTO_INCREMENT=22 ;

--
-- 转存表中的数据 `lib_role`
--

INSERT INTO `lib_role` (`id`, `name`, `action_list`, `created_at`, `updated_at`) VALUES
(20, '金属人', 0x626f6f6b735f6164642c626f6f6b735f656469742c626f6f6b735f64656c2c626f6f6b735f72657475726e2c626f6f6b735f626f72726f77, '2012-10-19 04:38:42', '2012-10-19 12:38:42'),
(21, '雇员', 0x626f6f6b735f6164642c626f6f6b735f656469742c626f6f6b735f64656c2c626f6f6b735f72657475726e2c626f6f6b735f626f72726f77, '2012-10-27 18:22:12', '2012-10-28 02:22:12'),
(12, 'admin', 0x626f6f6b735f6164642c626f6f6b735f656469742c626f6f6b735f64656c2c626f6f6b735f72657475726e2c626f6f6b735f626f72726f772c7265616465725f6164642c7265616465725f656469742c7265616465725f64656c2c61646d696e5f757365725f6164642c61646d696e5f757365725f656469742c61646d696e5f757365725f64656c2c61646d696e5f726f6c655f6164642c61646d696e5f726f6c655f656469742c61646d696e5f726f6c655f64656c2c6c69625f6e6577735f6164642c6c69625f6e6577735f656469742c6c69625f6e6577735f64656c2c6c69625f696e666f5f656469742c626f6f6b735f6361745f656469742c626f6f6b735f6361745f6164642c626f6f6b735f6361745f64656c, '2012-10-08 20:04:49', '2012-10-09 04:04:49');

-- --------------------------------------------------------

--
-- 表的结构 `lib_setting`
--

CREATE TABLE IF NOT EXISTS `lib_setting` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `TipsMoney` int(10) DEFAULT NULL,
  `validity` int(10) DEFAULT '30',
  `penaltyMoney` int(2) NOT NULL DEFAULT '1' COMMENT '损坏罚款',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COMMENT='设置表，比如办一张卡需要的钱' AUTO_INCREMENT=2 ;

--
-- 转存表中的数据 `lib_setting`
--

INSERT INTO `lib_setting` (`id`, `TipsMoney`, `validity`, `penaltyMoney`) VALUES
(1, 10, 30, 1);

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
